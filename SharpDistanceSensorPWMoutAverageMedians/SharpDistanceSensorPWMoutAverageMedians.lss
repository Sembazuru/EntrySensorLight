
C:\Users\CDELLI~1\AppData\Local\Temp\build-afb370d8-5070-4075-89fb-80ce3f046eb8/SharpDistanceSensorPWMoutAverageMedians.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000236e  00002402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000236e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f2  00800128  00800128  0000242a  2**0
                  ALLOC
  3 .debug_aranges 00000660  00000000  00000000  0000242a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000102b  00000000  00000000  00002a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007c12  00000000  00000000  00003ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000146e  00000000  00000000  0000b6c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c4b  00000000  00000000  0000cb35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b80  00000000  00000000  00010780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d1d  00000000  00000000  00011300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004107  00000000  00000000  0001301d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000628  00000000  00000000  00017124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    _cnt = 0;
    _idx = 0;
    _sorted = false;

    for (uint8_t i=0; i< _size; i++) _p[i] = i;
}
       0:	0c 94 21 01 	jmp	0x242	; 0x242 <__dtors_end>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
       4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
       8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      10:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      14:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      18:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      1c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      20:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      24:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      28:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      2c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      30:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      34:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      38:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      3c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      40:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_16>
      44:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      48:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_18>
      4c:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_19>
      50:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      54:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      58:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      5c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      60:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      64:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>

00000068 <_ZZ11diagnosticsmE3__c_22>:
      68:	41 66 61 64 65 56 61 6c 75 65 3a 30 3a 30 3a 31     AfadeValue:0:0:1
      78:	32 38 00                                            28.

0000007b <_ZZ11diagnosticsmE3__c_21>:
      7b:	41 66 61 64 65 44 69 72 3a 30 3a 31 32 38 3a 30     AfadeDir:0:128:0
	...

0000008c <_ZZ11diagnosticsmE3__c_20>:
      8c:	41 66 61 64 69 6e 67 3a 31 32 38 3a 30 3a 30 00     Afading:128:0:0.

0000009c <_ZZ11diagnosticsmE3__c_19>:
      9c:	41 74 72 69 67 67 65 72 65 64 3a 32 35 35 3a 30     Atriggered:255:0
      ac:	3a 32 35 35 00                                      :255.

000000b1 <_ZZ11diagnosticsmE3__c_18>:
      b1:	41 64 65 6c 74 61 41 76 65 72 61 67 65 3a 30 3a     AdeltaAverage:0:
      c1:	32 35 35 3a 32 35 35 00                             255:255.

000000c9 <_ZZ11diagnosticsmE3__c_17>:
      c9:	41 6c 61 73 74 53 69 67 6e 69 66 69 63 61 6e 74     AlastSignificant
      d9:	41 76 65 72 61 67 65 3a 32 35 35 3a 32 35 35 3a     Average:255:255:
      e9:	30 00                                               0.

000000eb <_ZZ11diagnosticsmE3__c_16>:
      eb:	41 63 75 72 72 65 6e 74 41 76 65 72 61 67 65 3a     AcurrentAverage:
      fb:	30 3a 30 3a 32 35 35 00                             0:0:255.

00000103 <_ZZ11diagnosticsmE3__c_15>:
     103:	41 63 75 72 72 65 6e 74 41 44 43 3a 30 3a 32 35     AcurrentADC:0:25
     113:	35 3a 30 00                                         5:0.

00000117 <_ZZ11diagnosticsmE3__c_14>:
     117:	59 30 3a 31 30 32 34 3a 36 34 00                    Y0:1024:64.

00000122 <_ZZ11diagnosticsmE3__c_13>:
     122:	46 30 3a 30 3a 30 00                                F0:0:0.

00000129 <_ZZ11diagnosticsmE3__c_12>:
     129:	42 32 35 35 3a 32 35 35 3a 32 35 35 00              B255:255:255.

00000136 <_ZZ11diagnosticsmE3__c_11>:
     136:	4d 31 30 3a 31 30 3a 36 30 3a 32 30 00              M10:10:60:20.

00000143 <_ZZ11diagnosticsmE3__c_10>:
     143:	53 31 32 38 30 3a 38 30 30 00                       S1280:800.

0000014d <_ZZ11diagnosticsmE3__c_9>:
     14d:	52 0a 52 0a 52 00                                   R.R.R.

00000153 <_ZZ11diagnosticsmE3__c_8>:
     153:	22 66 61 64 65 56 61 6c 75 65 22 00                 "fadeValue".

0000015f <_ZZ11diagnosticsmE3__c_7>:
     15f:	22 66 61 64 65 44 69 72 22 00                       "fadeDir".

00000169 <_ZZ11diagnosticsmE3__c_6>:
     169:	22 66 61 64 69 6e 67 22 00                          "fading".

00000172 <_ZZ11diagnosticsmE3__c_5>:
     172:	22 74 72 69 67 67 65 72 65 64 22 00                 "triggered".

0000017e <_ZZ11diagnosticsmE3__c_4>:
     17e:	22 64 65 6c 74 61 41 76 65 72 61 67 65 22 00        "deltaAverage".

0000018d <_ZZ11diagnosticsmE3__c_3>:
     18d:	22 6c 61 73 74 53 69 67 6e 69 66 69 63 61 6e 74     "lastSignificant
     19d:	41 76 65 72 61 67 65 22 00                          Average".

000001a6 <_ZZ11diagnosticsmE3__c_2>:
     1a6:	22 63 75 72 72 65 6e 74 41 76 65 72 61 67 65 22     "currentAverage"
	...

000001b7 <_ZZ11diagnosticsmE3__c_1>:
     1b7:	22 63 75 72 72 65 6e 74 41 44 43 22 00              "currentADC".

000001c4 <_ZZ11diagnosticsmE3__c_0>:
     1c4:	22 6d 79 4d 65 64 69 61 6e 2e 67 65 74 43 6f 75     "myMedian.getCou
     1d4:	6e 74 28 29 22 00                                   nt()".

000001da <_ZZ11diagnosticsmE3__c>:
     1da:	22 54 69 6d 65 22 00                                "Time".

000001e1 <port_to_mode_PGM>:
     1e1:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001eb <port_to_output_PGM>:
     1eb:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001f5 <port_to_input_PGM>:
     1f5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001ff <digital_pin_to_port_PGM>:
     1ff:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     20f:	03 03 03 03                                         ....

00000213 <digital_pin_to_bit_mask_PGM>:
     213:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     223:	04 08 10 20                                         ... 

00000227 <digital_pin_to_timer_PGM>:
     227:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     237:	00 00 00 00 00                                      .....

0000023c <__ctors_start>:
     23c:	7e 02       	muls	r23, r30
     23e:	24 0c       	add	r2, r4

00000240 <__ctors_end>:
     240:	77 02       	muls	r23, r23

00000242 <__dtors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d8 e0       	ldi	r29, 0x08	; 8
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	ee e6       	ldi	r30, 0x6E	; 110
     256:	f3 e2       	ldi	r31, 0x23	; 35
     258:	02 c0       	rjmp	.+4      	; 0x25e <.do_copy_data_start>

0000025a <.do_copy_data_loop>:
     25a:	05 90       	lpm	r0, Z+
     25c:	0d 92       	st	X+, r0

0000025e <.do_copy_data_start>:
     25e:	a8 32       	cpi	r26, 0x28	; 40
     260:	b1 07       	cpc	r27, r17
     262:	d9 f7       	brne	.-10     	; 0x25a <.do_copy_data_loop>

00000264 <__do_clear_bss>:
     264:	12 e0       	ldi	r17, 0x02	; 2
     266:	a8 e2       	ldi	r26, 0x28	; 40
     268:	b1 e0       	ldi	r27, 0x01	; 1
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	aa 31       	cpi	r26, 0x1A	; 26
     270:	b1 07       	cpc	r27, r17
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>

00000274 <__do_global_ctors>:
     274:	12 e0       	ldi	r17, 0x02	; 2
     276:	c0 e4       	ldi	r28, 0x40	; 64
     278:	d2 e0       	ldi	r29, 0x02	; 2
     27a:	04 c0       	rjmp	.+8      	; 0x284 <.do_global_ctors_start>

0000027c <.do_global_ctors_loop>:
     27c:	22 97       	sbiw	r28, 0x02	; 2
     27e:	fe 01       	movw	r30, r28
     280:	0e 94 a6 11 	call	0x234c	; 0x234c <__tablejump__>

00000284 <.do_global_ctors_start>:
     284:	cc 33       	cpi	r28, 0x3C	; 60
     286:	d1 07       	cpc	r29, r17
     288:	c9 f7       	brne	.-14     	; 0x27c <.do_global_ctors_loop>
     28a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <main>
     28e:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__do_global_dtors>

00000292 <__bad_interrupt>:
     292:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000296 <malloc>:
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	bc 01       	movw	r22, r24
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	91 05       	cpc	r25, r1
     2a0:	10 f4       	brcc	.+4      	; 0x2a6 <malloc+0x10>
     2a2:	62 e0       	ldi	r22, 0x02	; 2
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	a0 91 18 02 	lds	r26, 0x0218
     2aa:	b0 91 19 02 	lds	r27, 0x0219
     2ae:	ed 01       	movw	r28, r26
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	21 c0       	rjmp	.+66     	; 0x2fc <malloc+0x66>
     2ba:	88 81       	ld	r24, Y
     2bc:	99 81       	ldd	r25, Y+1	; 0x01
     2be:	86 17       	cp	r24, r22
     2c0:	97 07       	cpc	r25, r23
     2c2:	69 f4       	brne	.+26     	; 0x2de <malloc+0x48>
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	9b 81       	ldd	r25, Y+3	; 0x03
     2c8:	30 97       	sbiw	r30, 0x00	; 0
     2ca:	19 f0       	breq	.+6      	; 0x2d2 <malloc+0x3c>
     2cc:	93 83       	std	Z+3, r25	; 0x03
     2ce:	82 83       	std	Z+2, r24	; 0x02
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <malloc+0x44>
     2d2:	90 93 19 02 	sts	0x0219, r25
     2d6:	80 93 18 02 	sts	0x0218, r24
     2da:	fe 01       	movw	r30, r28
     2dc:	34 c0       	rjmp	.+104    	; 0x346 <malloc+0xb0>
     2de:	68 17       	cp	r22, r24
     2e0:	79 07       	cpc	r23, r25
     2e2:	38 f4       	brcc	.+14     	; 0x2f2 <malloc+0x5c>
     2e4:	41 15       	cp	r20, r1
     2e6:	51 05       	cpc	r21, r1
     2e8:	19 f0       	breq	.+6      	; 0x2f0 <malloc+0x5a>
     2ea:	84 17       	cp	r24, r20
     2ec:	95 07       	cpc	r25, r21
     2ee:	08 f4       	brcc	.+2      	; 0x2f2 <malloc+0x5c>
     2f0:	ac 01       	movw	r20, r24
     2f2:	fe 01       	movw	r30, r28
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	9b 81       	ldd	r25, Y+3	; 0x03
     2f8:	9c 01       	movw	r18, r24
     2fa:	e9 01       	movw	r28, r18
     2fc:	20 97       	sbiw	r28, 0x00	; 0
     2fe:	e9 f6       	brne	.-70     	; 0x2ba <malloc+0x24>
     300:	41 15       	cp	r20, r1
     302:	51 05       	cpc	r21, r1
     304:	a9 f1       	breq	.+106    	; 0x370 <malloc+0xda>
     306:	ca 01       	movw	r24, r20
     308:	86 1b       	sub	r24, r22
     30a:	97 0b       	sbc	r25, r23
     30c:	04 97       	sbiw	r24, 0x04	; 4
     30e:	08 f4       	brcc	.+2      	; 0x312 <malloc+0x7c>
     310:	ba 01       	movw	r22, r20
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	2a c0       	rjmp	.+84     	; 0x36c <malloc+0xd6>
     318:	8d 91       	ld	r24, X+
     31a:	9c 91       	ld	r25, X
     31c:	11 97       	sbiw	r26, 0x01	; 1
     31e:	84 17       	cp	r24, r20
     320:	95 07       	cpc	r25, r21
     322:	f9 f4       	brne	.+62     	; 0x362 <malloc+0xcc>
     324:	64 17       	cp	r22, r20
     326:	75 07       	cpc	r23, r21
     328:	81 f4       	brne	.+32     	; 0x34a <malloc+0xb4>
     32a:	12 96       	adiw	r26, 0x02	; 2
     32c:	8d 91       	ld	r24, X+
     32e:	9c 91       	ld	r25, X
     330:	13 97       	sbiw	r26, 0x03	; 3
     332:	30 97       	sbiw	r30, 0x00	; 0
     334:	19 f0       	breq	.+6      	; 0x33c <malloc+0xa6>
     336:	93 83       	std	Z+3, r25	; 0x03
     338:	82 83       	std	Z+2, r24	; 0x02
     33a:	04 c0       	rjmp	.+8      	; 0x344 <malloc+0xae>
     33c:	90 93 19 02 	sts	0x0219, r25
     340:	80 93 18 02 	sts	0x0218, r24
     344:	fd 01       	movw	r30, r26
     346:	32 96       	adiw	r30, 0x02	; 2
     348:	4c c0       	rjmp	.+152    	; 0x3e2 <malloc+0x14c>
     34a:	ca 01       	movw	r24, r20
     34c:	86 1b       	sub	r24, r22
     34e:	97 0b       	sbc	r25, r23
     350:	fd 01       	movw	r30, r26
     352:	e8 0f       	add	r30, r24
     354:	f9 1f       	adc	r31, r25
     356:	61 93       	st	Z+, r22
     358:	71 93       	st	Z+, r23
     35a:	02 97       	sbiw	r24, 0x02	; 2
     35c:	8d 93       	st	X+, r24
     35e:	9c 93       	st	X, r25
     360:	40 c0       	rjmp	.+128    	; 0x3e2 <malloc+0x14c>
     362:	fd 01       	movw	r30, r26
     364:	82 81       	ldd	r24, Z+2	; 0x02
     366:	93 81       	ldd	r25, Z+3	; 0x03
     368:	9c 01       	movw	r18, r24
     36a:	d9 01       	movw	r26, r18
     36c:	10 97       	sbiw	r26, 0x00	; 0
     36e:	a1 f6       	brne	.-88     	; 0x318 <malloc+0x82>
     370:	80 91 16 02 	lds	r24, 0x0216
     374:	90 91 17 02 	lds	r25, 0x0217
     378:	89 2b       	or	r24, r25
     37a:	41 f4       	brne	.+16     	; 0x38c <malloc+0xf6>
     37c:	80 91 10 01 	lds	r24, 0x0110
     380:	90 91 11 01 	lds	r25, 0x0111
     384:	90 93 17 02 	sts	0x0217, r25
     388:	80 93 16 02 	sts	0x0216, r24
     38c:	40 91 12 01 	lds	r20, 0x0112
     390:	50 91 13 01 	lds	r21, 0x0113
     394:	41 15       	cp	r20, r1
     396:	51 05       	cpc	r21, r1
     398:	41 f4       	brne	.+16     	; 0x3aa <malloc+0x114>
     39a:	4d b7       	in	r20, 0x3d	; 61
     39c:	5e b7       	in	r21, 0x3e	; 62
     39e:	80 91 0e 01 	lds	r24, 0x010E
     3a2:	90 91 0f 01 	lds	r25, 0x010F
     3a6:	48 1b       	sub	r20, r24
     3a8:	59 0b       	sbc	r21, r25
     3aa:	20 91 16 02 	lds	r18, 0x0216
     3ae:	30 91 17 02 	lds	r19, 0x0217
     3b2:	ca 01       	movw	r24, r20
     3b4:	82 1b       	sub	r24, r18
     3b6:	93 0b       	sbc	r25, r19
     3b8:	86 17       	cp	r24, r22
     3ba:	97 07       	cpc	r25, r23
     3bc:	80 f0       	brcs	.+32     	; 0x3de <malloc+0x148>
     3be:	ab 01       	movw	r20, r22
     3c0:	4e 5f       	subi	r20, 0xFE	; 254
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	84 17       	cp	r24, r20
     3c6:	95 07       	cpc	r25, r21
     3c8:	50 f0       	brcs	.+20     	; 0x3de <malloc+0x148>
     3ca:	42 0f       	add	r20, r18
     3cc:	53 1f       	adc	r21, r19
     3ce:	50 93 17 02 	sts	0x0217, r21
     3d2:	40 93 16 02 	sts	0x0216, r20
     3d6:	f9 01       	movw	r30, r18
     3d8:	61 93       	st	Z+, r22
     3da:	71 93       	st	Z+, r23
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <malloc+0x14c>
     3de:	e0 e0       	ldi	r30, 0x00	; 0
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	cf 01       	movw	r24, r30
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <free>:
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <free+0xa>
     3f2:	50 c0       	rjmp	.+160    	; 0x494 <free+0xaa>
     3f4:	ec 01       	movw	r28, r24
     3f6:	22 97       	sbiw	r28, 0x02	; 2
     3f8:	1b 82       	std	Y+3, r1	; 0x03
     3fa:	1a 82       	std	Y+2, r1	; 0x02
     3fc:	a0 91 18 02 	lds	r26, 0x0218
     400:	b0 91 19 02 	lds	r27, 0x0219
     404:	10 97       	sbiw	r26, 0x00	; 0
     406:	09 f1       	breq	.+66     	; 0x44a <free+0x60>
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	ac 17       	cp	r26, r28
     40e:	bd 07       	cpc	r27, r29
     410:	08 f1       	brcs	.+66     	; 0x454 <free+0x6a>
     412:	bb 83       	std	Y+3, r27	; 0x03
     414:	aa 83       	std	Y+2, r26	; 0x02
     416:	fe 01       	movw	r30, r28
     418:	21 91       	ld	r18, Z+
     41a:	31 91       	ld	r19, Z+
     41c:	e2 0f       	add	r30, r18
     41e:	f3 1f       	adc	r31, r19
     420:	ae 17       	cp	r26, r30
     422:	bf 07       	cpc	r27, r31
     424:	79 f4       	brne	.+30     	; 0x444 <free+0x5a>
     426:	8d 91       	ld	r24, X+
     428:	9c 91       	ld	r25, X
     42a:	11 97       	sbiw	r26, 0x01	; 1
     42c:	28 0f       	add	r18, r24
     42e:	39 1f       	adc	r19, r25
     430:	2e 5f       	subi	r18, 0xFE	; 254
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	39 83       	std	Y+1, r19	; 0x01
     436:	28 83       	st	Y, r18
     438:	12 96       	adiw	r26, 0x02	; 2
     43a:	8d 91       	ld	r24, X+
     43c:	9c 91       	ld	r25, X
     43e:	13 97       	sbiw	r26, 0x03	; 3
     440:	9b 83       	std	Y+3, r25	; 0x03
     442:	8a 83       	std	Y+2, r24	; 0x02
     444:	41 15       	cp	r20, r1
     446:	51 05       	cpc	r21, r1
     448:	71 f4       	brne	.+28     	; 0x466 <free+0x7c>
     44a:	d0 93 19 02 	sts	0x0219, r29
     44e:	c0 93 18 02 	sts	0x0218, r28
     452:	20 c0       	rjmp	.+64     	; 0x494 <free+0xaa>
     454:	12 96       	adiw	r26, 0x02	; 2
     456:	8d 91       	ld	r24, X+
     458:	9c 91       	ld	r25, X
     45a:	13 97       	sbiw	r26, 0x03	; 3
     45c:	ad 01       	movw	r20, r26
     45e:	00 97       	sbiw	r24, 0x00	; 0
     460:	11 f0       	breq	.+4      	; 0x466 <free+0x7c>
     462:	dc 01       	movw	r26, r24
     464:	d3 cf       	rjmp	.-90     	; 0x40c <free+0x22>
     466:	fa 01       	movw	r30, r20
     468:	d3 83       	std	Z+3, r29	; 0x03
     46a:	c2 83       	std	Z+2, r28	; 0x02
     46c:	21 91       	ld	r18, Z+
     46e:	31 91       	ld	r19, Z+
     470:	e2 0f       	add	r30, r18
     472:	f3 1f       	adc	r31, r19
     474:	ce 17       	cp	r28, r30
     476:	df 07       	cpc	r29, r31
     478:	69 f4       	brne	.+26     	; 0x494 <free+0xaa>
     47a:	88 81       	ld	r24, Y
     47c:	99 81       	ldd	r25, Y+1	; 0x01
     47e:	28 0f       	add	r18, r24
     480:	39 1f       	adc	r19, r25
     482:	2e 5f       	subi	r18, 0xFE	; 254
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	fa 01       	movw	r30, r20
     488:	31 83       	std	Z+1, r19	; 0x01
     48a:	20 83       	st	Z, r18
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	9b 81       	ldd	r25, Y+3	; 0x03
     490:	93 83       	std	Z+3, r25	; 0x03
     492:	82 83       	std	Z+2, r24	; 0x02
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <_Z41__static_initialization_and_destruction_0ii>:
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	91 05       	cpc	r25, r1
     49e:	e9 f4       	brne	.+58     	; 0x4da <_Z41__static_initialization_and_destruction_0ii+0x40>
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	19 f5       	brne	.+70     	; 0x4ec <_Z41__static_initialization_and_destruction_0ii+0x52>
     4a6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     4aa:	60 93 2e 01 	sts	0x012E, r22
     4ae:	70 93 2f 01 	sts	0x012F, r23
     4b2:	80 93 30 01 	sts	0x0130, r24
     4b6:	90 93 31 01 	sts	0x0131, r25
     4ba:	82 e3       	ldi	r24, 0x32	; 50
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	63 e1       	ldi	r22, 0x13	; 19
     4c0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN13RunningMedianC1Eh>
     4c4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     4c8:	60 93 5d 01 	sts	0x015D, r22
     4cc:	70 93 5e 01 	sts	0x015E, r23
     4d0:	80 93 5f 01 	sts	0x015F, r24
     4d4:	90 93 60 01 	sts	0x0160, r25
     4d8:	08 95       	ret
     4da:	89 2b       	or	r24, r25
     4dc:	39 f4       	brne	.+14     	; 0x4ec <_Z41__static_initialization_and_destruction_0ii+0x52>
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	21 f4       	brne	.+8      	; 0x4ec <_Z41__static_initialization_and_destruction_0ii+0x52>
     4e4:	82 e3       	ldi	r24, 0x32	; 50
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <_ZN13RunningMedianD1Ev>
     4ec:	08 95       	ret

000004ee <_GLOBAL__D_startDiagnostics>:
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	6f ef       	ldi	r22, 0xFF	; 255
     4f4:	7f ef       	ldi	r23, 0xFF	; 255
     4f6:	0e 94 4d 02 	call	0x49a	; 0x49a <_Z41__static_initialization_and_destruction_0ii>
     4fa:	08 95       	ret

000004fc <_GLOBAL__I_startDiagnostics>:
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	6f ef       	ldi	r22, 0xFF	; 255
     502:	7f ef       	ldi	r23, 0xFF	; 255
     504:	0e 94 4d 02 	call	0x49a	; 0x49a <_Z41__static_initialization_and_destruction_0ii>
     508:	08 95       	ret

0000050a <_Z11diagnosticsm>:
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	7b 01       	movw	r14, r22
     514:	8c 01       	movw	r16, r24
     516:	83 e1       	ldi	r24, 0x13	; 19
     518:	0e 94 14 0a 	call	0x1428	; 0x1428 <digitalRead>
     51c:	89 2b       	or	r24, r25
     51e:	31 f4       	brne	.+12     	; 0x52c <_Z11diagnosticsm+0x22>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 14 01 	sts	0x0114, r24
     526:	80 93 15 01 	sts	0x0115, r24
     52a:	0c c2       	rjmp	.+1048   	; 0x944 <__stack+0x45>
     52c:	81 e1       	ldi	r24, 0x11	; 17
     52e:	0e 94 14 0a 	call	0x1428	; 0x1428 <digitalRead>
     532:	89 2b       	or	r24, r25
     534:	09 f4       	brne	.+2      	; 0x538 <_Z11diagnosticsm+0x2e>
     536:	1e c1       	rjmp	.+572    	; 0x774 <_Z11diagnosticsm+0x26a>
     538:	80 91 14 01 	lds	r24, 0x0114
     53c:	88 23       	and	r24, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <_Z11diagnosticsm+0x38>
     540:	72 c0       	rjmp	.+228    	; 0x626 <_Z11diagnosticsm+0x11c>
     542:	10 92 14 01 	sts	0x0114, r1
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 15 01 	sts	0x0115, r24
     54c:	84 ef       	ldi	r24, 0xF4	; 244
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	6a ed       	ldi	r22, 0xDA	; 218
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     558:	84 ef       	ldi	r24, 0xF4	; 244
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	6c e2       	ldi	r22, 0x2C	; 44
     55e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     562:	84 ef       	ldi	r24, 0xF4	; 244
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	64 ec       	ldi	r22, 0xC4	; 196
     568:	71 e0       	ldi	r23, 0x01	; 1
     56a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     56e:	84 ef       	ldi	r24, 0xF4	; 244
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	6c e2       	ldi	r22, 0x2C	; 44
     574:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     578:	84 ef       	ldi	r24, 0xF4	; 244
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	67 eb       	ldi	r22, 0xB7	; 183
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     584:	84 ef       	ldi	r24, 0xF4	; 244
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	6c e2       	ldi	r22, 0x2C	; 44
     58a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     58e:	84 ef       	ldi	r24, 0xF4	; 244
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	66 ea       	ldi	r22, 0xA6	; 166
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     59a:	84 ef       	ldi	r24, 0xF4	; 244
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	6c e2       	ldi	r22, 0x2C	; 44
     5a0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     5a4:	84 ef       	ldi	r24, 0xF4	; 244
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	6d e8       	ldi	r22, 0x8D	; 141
     5aa:	71 e0       	ldi	r23, 0x01	; 1
     5ac:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     5b0:	84 ef       	ldi	r24, 0xF4	; 244
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	6c e2       	ldi	r22, 0x2C	; 44
     5b6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     5ba:	84 ef       	ldi	r24, 0xF4	; 244
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	6e e7       	ldi	r22, 0x7E	; 126
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     5c6:	84 ef       	ldi	r24, 0xF4	; 244
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	6c e2       	ldi	r22, 0x2C	; 44
     5cc:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     5d0:	84 ef       	ldi	r24, 0xF4	; 244
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	62 e7       	ldi	r22, 0x72	; 114
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     5dc:	84 ef       	ldi	r24, 0xF4	; 244
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	6c e2       	ldi	r22, 0x2C	; 44
     5e2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     5e6:	84 ef       	ldi	r24, 0xF4	; 244
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	69 e6       	ldi	r22, 0x69	; 105
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     5f2:	84 ef       	ldi	r24, 0xF4	; 244
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	6c e2       	ldi	r22, 0x2C	; 44
     5f8:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     5fc:	84 ef       	ldi	r24, 0xF4	; 244
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	6f e5       	ldi	r22, 0x5F	; 95
     602:	71 e0       	ldi	r23, 0x01	; 1
     604:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     608:	84 ef       	ldi	r24, 0xF4	; 244
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	6c e2       	ldi	r22, 0x2C	; 44
     60e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     612:	84 ef       	ldi	r24, 0xF4	; 244
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	63 e5       	ldi	r22, 0x53	; 83
     618:	71 e0       	ldi	r23, 0x01	; 1
     61a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
     61e:	84 ef       	ldi	r24, 0xF4	; 244
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN5Print7printlnEv>
     626:	84 ef       	ldi	r24, 0xF4	; 244
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	b8 01       	movw	r22, r16
     62c:	a7 01       	movw	r20, r14
     62e:	2a e0       	ldi	r18, 0x0A	; 10
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN5Print5printEmi>
     636:	84 ef       	ldi	r24, 0xF4	; 244
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	6c e2       	ldi	r22, 0x2C	; 44
     63c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     640:	82 e3       	ldi	r24, 0x32	; 50
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN13RunningMedian8getCountEv>
     648:	68 2f       	mov	r22, r24
     64a:	84 ef       	ldi	r24, 0xF4	; 244
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	4a e0       	ldi	r20, 0x0A	; 10
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN5Print5printEhi>
     656:	84 ef       	ldi	r24, 0xF4	; 244
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	6c e2       	ldi	r22, 0x2C	; 44
     65c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     660:	60 91 28 01 	lds	r22, 0x0128
     664:	70 91 29 01 	lds	r23, 0x0129
     668:	84 ef       	ldi	r24, 0xF4	; 244
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	4a e0       	ldi	r20, 0x0A	; 10
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN5Print5printEji>
     674:	84 ef       	ldi	r24, 0xF4	; 244
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	6c e2       	ldi	r22, 0x2C	; 44
     67a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     67e:	40 91 2a 01 	lds	r20, 0x012A
     682:	50 91 2b 01 	lds	r21, 0x012B
     686:	60 91 2c 01 	lds	r22, 0x012C
     68a:	70 91 2d 01 	lds	r23, 0x012D
     68e:	84 ef       	ldi	r24, 0xF4	; 244
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	22 e0       	ldi	r18, 0x02	; 2
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN5Print5printEdi>
     69a:	84 ef       	ldi	r24, 0xF4	; 244
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	6c e2       	ldi	r22, 0x2C	; 44
     6a0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     6a4:	40 91 52 01 	lds	r20, 0x0152
     6a8:	50 91 53 01 	lds	r21, 0x0153
     6ac:	60 91 54 01 	lds	r22, 0x0154
     6b0:	70 91 55 01 	lds	r23, 0x0155
     6b4:	84 ef       	ldi	r24, 0xF4	; 244
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	22 e0       	ldi	r18, 0x02	; 2
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN5Print5printEdi>
     6c0:	84 ef       	ldi	r24, 0xF4	; 244
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	6c e2       	ldi	r22, 0x2C	; 44
     6c6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     6ca:	60 91 2a 01 	lds	r22, 0x012A
     6ce:	70 91 2b 01 	lds	r23, 0x012B
     6d2:	80 91 2c 01 	lds	r24, 0x012C
     6d6:	90 91 2d 01 	lds	r25, 0x012D
     6da:	20 91 52 01 	lds	r18, 0x0152
     6de:	30 91 53 01 	lds	r19, 0x0153
     6e2:	40 91 54 01 	lds	r20, 0x0154
     6e6:	50 91 55 01 	lds	r21, 0x0155
     6ea:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__subsf3>
     6ee:	ab 01       	movw	r20, r22
     6f0:	bc 01       	movw	r22, r24
     6f2:	84 ef       	ldi	r24, 0xF4	; 244
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	22 e0       	ldi	r18, 0x02	; 2
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN5Print5printEdi>
     6fe:	84 ef       	ldi	r24, 0xF4	; 244
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	6c e2       	ldi	r22, 0x2C	; 44
     704:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     708:	84 ef       	ldi	r24, 0xF4	; 244
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	60 91 5a 01 	lds	r22, 0x015A
     710:	4a e0       	ldi	r20, 0x0A	; 10
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN5Print5printEhi>
     718:	84 ef       	ldi	r24, 0xF4	; 244
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	6c e2       	ldi	r22, 0x2C	; 44
     71e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     722:	84 ef       	ldi	r24, 0xF4	; 244
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	60 91 5b 01 	lds	r22, 0x015B
     72a:	4a e0       	ldi	r20, 0x0A	; 10
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN5Print5printEhi>
     732:	84 ef       	ldi	r24, 0xF4	; 244
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	6c e2       	ldi	r22, 0x2C	; 44
     738:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     73c:	84 ef       	ldi	r24, 0xF4	; 244
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	60 91 5c 01 	lds	r22, 0x015C
     744:	4a e0       	ldi	r20, 0x0A	; 10
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN5Print5printEhi>
     74c:	84 ef       	ldi	r24, 0xF4	; 244
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	6c e2       	ldi	r22, 0x2C	; 44
     752:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     756:	60 91 61 01 	lds	r22, 0x0161
     75a:	70 91 62 01 	lds	r23, 0x0162
     75e:	84 ef       	ldi	r24, 0xF4	; 244
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	4a e0       	ldi	r20, 0x0A	; 10
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN5Print5printEii>
     76a:	84 ef       	ldi	r24, 0xF4	; 244
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN5Print7printlnEv>
     772:	e8 c0       	rjmp	.+464    	; 0x944 <__stack+0x45>
     774:	80 91 15 01 	lds	r24, 0x0115
     778:	88 23       	and	r24, r24
     77a:	09 f4       	brne	.+2      	; 0x77e <_Z11diagnosticsm+0x274>
     77c:	59 c0       	rjmp	.+178    	; 0x830 <_Z11diagnosticsm+0x326>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 93 14 01 	sts	0x0114, r24
     784:	10 92 15 01 	sts	0x0115, r1
     788:	84 ef       	ldi	r24, 0xF4	; 244
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	6d e4       	ldi	r22, 0x4D	; 77
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     794:	84 ef       	ldi	r24, 0xF4	; 244
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	63 e4       	ldi	r22, 0x43	; 67
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7a0:	84 ef       	ldi	r24, 0xF4	; 244
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	66 e3       	ldi	r22, 0x36	; 54
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7ac:	84 ef       	ldi	r24, 0xF4	; 244
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	69 e2       	ldi	r22, 0x29	; 41
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7b8:	84 ef       	ldi	r24, 0xF4	; 244
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	62 e2       	ldi	r22, 0x22	; 34
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7c4:	84 ef       	ldi	r24, 0xF4	; 244
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	67 e1       	ldi	r22, 0x17	; 23
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7d0:	84 ef       	ldi	r24, 0xF4	; 244
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	63 e0       	ldi	r22, 0x03	; 3
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7dc:	84 ef       	ldi	r24, 0xF4	; 244
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	6b ee       	ldi	r22, 0xEB	; 235
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7e8:	84 ef       	ldi	r24, 0xF4	; 244
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	69 ec       	ldi	r22, 0xC9	; 201
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     7f4:	84 ef       	ldi	r24, 0xF4	; 244
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	61 eb       	ldi	r22, 0xB1	; 177
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     800:	84 ef       	ldi	r24, 0xF4	; 244
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	6c e9       	ldi	r22, 0x9C	; 156
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     80c:	84 ef       	ldi	r24, 0xF4	; 244
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	6c e8       	ldi	r22, 0x8C	; 140
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     818:	84 ef       	ldi	r24, 0xF4	; 244
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	6b e7       	ldi	r22, 0x7B	; 123
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     824:	84 ef       	ldi	r24, 0xF4	; 244
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	68 e6       	ldi	r22, 0x68	; 104
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEPK19__FlashStringHelper>
     830:	84 ef       	ldi	r24, 0xF4	; 244
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	66 e5       	ldi	r22, 0x56	; 86
     836:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     83a:	60 91 28 01 	lds	r22, 0x0128
     83e:	70 91 29 01 	lds	r23, 0x0129
     842:	84 ef       	ldi	r24, 0xF4	; 244
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	4a e0       	ldi	r20, 0x0A	; 10
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN5Print5printEji>
     84e:	84 ef       	ldi	r24, 0xF4	; 244
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	6a e3       	ldi	r22, 0x3A	; 58
     854:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     858:	40 91 2a 01 	lds	r20, 0x012A
     85c:	50 91 2b 01 	lds	r21, 0x012B
     860:	60 91 2c 01 	lds	r22, 0x012C
     864:	70 91 2d 01 	lds	r23, 0x012D
     868:	84 ef       	ldi	r24, 0xF4	; 244
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	22 e0       	ldi	r18, 0x02	; 2
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN5Print5printEdi>
     874:	84 ef       	ldi	r24, 0xF4	; 244
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	6a e3       	ldi	r22, 0x3A	; 58
     87a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     87e:	40 91 52 01 	lds	r20, 0x0152
     882:	50 91 53 01 	lds	r21, 0x0153
     886:	60 91 54 01 	lds	r22, 0x0154
     88a:	70 91 55 01 	lds	r23, 0x0155
     88e:	84 ef       	ldi	r24, 0xF4	; 244
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	22 e0       	ldi	r18, 0x02	; 2
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN5Print5printEdi>
     89a:	84 ef       	ldi	r24, 0xF4	; 244
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	6a e3       	ldi	r22, 0x3A	; 58
     8a0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     8a4:	60 91 2a 01 	lds	r22, 0x012A
     8a8:	70 91 2b 01 	lds	r23, 0x012B
     8ac:	80 91 2c 01 	lds	r24, 0x012C
     8b0:	90 91 2d 01 	lds	r25, 0x012D
     8b4:	20 91 52 01 	lds	r18, 0x0152
     8b8:	30 91 53 01 	lds	r19, 0x0153
     8bc:	40 91 54 01 	lds	r20, 0x0154
     8c0:	50 91 55 01 	lds	r21, 0x0155
     8c4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__subsf3>
     8c8:	ab 01       	movw	r20, r22
     8ca:	bc 01       	movw	r22, r24
     8cc:	84 ef       	ldi	r24, 0xF4	; 244
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	22 e0       	ldi	r18, 0x02	; 2
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN5Print5printEdi>
     8d8:	84 ef       	ldi	r24, 0xF4	; 244
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	6a e3       	ldi	r22, 0x3A	; 58
     8de:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     8e2:	84 ef       	ldi	r24, 0xF4	; 244
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	60 91 5a 01 	lds	r22, 0x015A
     8ea:	4a e0       	ldi	r20, 0x0A	; 10
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN5Print5printEhi>
     8f2:	84 ef       	ldi	r24, 0xF4	; 244
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	6a e3       	ldi	r22, 0x3A	; 58
     8f8:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     8fc:	84 ef       	ldi	r24, 0xF4	; 244
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	60 91 5b 01 	lds	r22, 0x015B
     904:	4a e0       	ldi	r20, 0x0A	; 10
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN5Print5printEhi>
     90c:	84 ef       	ldi	r24, 0xF4	; 244
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	6a e3       	ldi	r22, 0x3A	; 58
     912:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     916:	84 ef       	ldi	r24, 0xF4	; 244
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	60 91 5c 01 	lds	r22, 0x015C
     91e:	4a e0       	ldi	r20, 0x0A	; 10
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN5Print5printEhi>
     926:	84 ef       	ldi	r24, 0xF4	; 244
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	6a e3       	ldi	r22, 0x3A	; 58
     92c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN5Print5printEc>
     930:	60 91 61 01 	lds	r22, 0x0161
     934:	70 91 62 01 	lds	r23, 0x0162
     938:	84 ef       	ldi	r24, 0xF4	; 244
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	4a e0       	ldi	r20, 0x0A	; 10
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN5Print7printlnEii>
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	08 95       	ret

0000094e <_Z10fadeOutputiih>:
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	7c 01       	movw	r14, r24
     95a:	eb 01       	movw	r28, r22
     95c:	14 2f       	mov	r17, r20
     95e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     962:	60 93 5d 01 	sts	0x015D, r22
     966:	70 93 5e 01 	sts	0x015E, r23
     96a:	80 93 5f 01 	sts	0x015F, r24
     96e:	90 93 60 01 	sts	0x0160, r25
     972:	11 23       	and	r17, r17
     974:	49 f4       	brne	.+18     	; 0x988 <_Z10fadeOutputiih+0x3a>
     976:	ce 01       	movw	r24, r28
     978:	62 e0       	ldi	r22, 0x02	; 2
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__divmodhi4>
     980:	cc 27       	eor	r28, r28
     982:	dd 27       	eor	r29, r29
     984:	c6 1b       	sub	r28, r22
     986:	d7 0b       	sbc	r29, r23
     988:	ce 0d       	add	r28, r14
     98a:	df 1d       	adc	r29, r15
     98c:	d7 ff       	sbrs	r29, 7
     98e:	05 c0       	rjmp	.+10     	; 0x99a <_Z10fadeOutputiih+0x4c>
     990:	10 92 5b 01 	sts	0x015B, r1
     994:	c0 e0       	ldi	r28, 0x00	; 0
     996:	d0 e0       	ldi	r29, 0x00	; 0
     998:	08 c0       	rjmp	.+16     	; 0x9aa <_Z10fadeOutputiih+0x5c>
     99a:	cf 3f       	cpi	r28, 0xFF	; 255
     99c:	d1 05       	cpc	r29, r1
     99e:	29 f0       	breq	.+10     	; 0x9aa <_Z10fadeOutputiih+0x5c>
     9a0:	24 f0       	brlt	.+8      	; 0x9aa <_Z10fadeOutputiih+0x5c>
     9a2:	10 92 5b 01 	sts	0x015B, r1
     9a6:	cf ef       	ldi	r28, 0xFF	; 255
     9a8:	d0 e0       	ldi	r29, 0x00	; 0
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	be 01       	movw	r22, r28
     9ae:	0e 94 21 09 	call	0x1242	; 0x1242 <analogWrite>
     9b2:	ce 01       	movw	r24, r28
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	08 95       	ret

000009c0 <_Z12triggerCheckv>:
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	a0 90 2a 01 	lds	r10, 0x012A
     9d4:	b0 90 2b 01 	lds	r11, 0x012B
     9d8:	c0 90 2c 01 	lds	r12, 0x012C
     9dc:	d0 90 2d 01 	lds	r13, 0x012D
     9e0:	e0 90 52 01 	lds	r14, 0x0152
     9e4:	f0 90 53 01 	lds	r15, 0x0153
     9e8:	00 91 54 01 	lds	r16, 0x0154
     9ec:	10 91 55 01 	lds	r17, 0x0155
     9f0:	c8 01       	movw	r24, r16
     9f2:	b7 01       	movw	r22, r14
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 ea       	ldi	r20, 0xA0	; 160
     9fa:	50 e4       	ldi	r21, 0x40	; 64
     9fc:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__subsf3>
     a00:	9b 01       	movw	r18, r22
     a02:	ac 01       	movw	r20, r24
     a04:	c6 01       	movw	r24, r12
     a06:	b5 01       	movw	r22, r10
     a08:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
     a0c:	87 fd       	sbrc	r24, 7
     a0e:	10 c0       	rjmp	.+32     	; 0xa30 <_Z12triggerCheckv+0x70>
     a10:	c8 01       	movw	r24, r16
     a12:	b7 01       	movw	r22, r14
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 ea       	ldi	r20, 0xA0	; 160
     a1a:	50 e4       	ldi	r21, 0x40	; 64
     a1c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__addsf3>
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
     a24:	c6 01       	movw	r24, r12
     a26:	b5 01       	movw	r22, r10
     a28:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__gesf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	ac f4       	brge	.+42     	; 0xa5a <_Z12triggerCheckv+0x9a>
     a30:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     a34:	60 93 56 01 	sts	0x0156, r22
     a38:	70 93 57 01 	sts	0x0157, r23
     a3c:	80 93 58 01 	sts	0x0158, r24
     a40:	90 93 59 01 	sts	0x0159, r25
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 5a 01 	sts	0x015A, r24
     a4a:	80 93 5b 01 	sts	0x015B, r24
     a4e:	80 93 5c 01 	sts	0x015C, r24
     a52:	8d e0       	ldi	r24, 0x0D	; 13
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	0e 94 c0 09 	call	0x1380	; 0x1380 <digitalWrite>
     a5a:	80 91 5a 01 	lds	r24, 0x015A
     a5e:	88 23       	and	r24, r24
     a60:	f1 f0       	breq	.+60     	; 0xa9e <_Z12triggerCheckv+0xde>
     a62:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     a66:	20 91 56 01 	lds	r18, 0x0156
     a6a:	30 91 57 01 	lds	r19, 0x0157
     a6e:	40 91 58 01 	lds	r20, 0x0158
     a72:	50 91 59 01 	lds	r21, 0x0159
     a76:	62 1b       	sub	r22, r18
     a78:	73 0b       	sbc	r23, r19
     a7a:	84 0b       	sbc	r24, r20
     a7c:	95 0b       	sbc	r25, r21
     a7e:	61 51       	subi	r22, 0x11	; 17
     a80:	77 42       	sbci	r23, 0x27	; 39
     a82:	80 40       	sbci	r24, 0x00	; 0
     a84:	90 40       	sbci	r25, 0x00	; 0
     a86:	58 f0       	brcs	.+22     	; 0xa9e <_Z12triggerCheckv+0xde>
     a88:	10 92 5a 01 	sts	0x015A, r1
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 5b 01 	sts	0x015B, r24
     a92:	10 92 5c 01 	sts	0x015C, r1
     a96:	8d e0       	ldi	r24, 0x0D	; 13
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	0e 94 c0 09 	call	0x1380	; 0x1380 <digitalWrite>
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	bf 90       	pop	r11
     aac:	af 90       	pop	r10
     aae:	08 95       	ret

00000ab0 <_Z7getDatav>:
     ab0:	1f 93       	push	r17
     ab2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     ab6:	60 93 2e 01 	sts	0x012E, r22
     aba:	70 93 2f 01 	sts	0x012F, r23
     abe:	80 93 30 01 	sts	0x0130, r24
     ac2:	90 93 31 01 	sts	0x0131, r25
     ac6:	8e e0       	ldi	r24, 0x0E	; 14
     ac8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <analogRead>
     acc:	9c 01       	movw	r18, r24
     ace:	90 93 29 01 	sts	0x0129, r25
     ad2:	80 93 28 01 	sts	0x0128, r24
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	ca 01       	movw	r24, r20
     adc:	b9 01       	movw	r22, r18
     ade:	0e 94 1f 10 	call	0x203e	; 0x203e <__floatunsisf>
     ae2:	ab 01       	movw	r20, r22
     ae4:	bc 01       	movw	r22, r24
     ae6:	82 e3       	ldi	r24, 0x32	; 50
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN13RunningMedian3addEf>
     aee:	80 91 4e 01 	lds	r24, 0x014E
     af2:	90 91 4f 01 	lds	r25, 0x014F
     af6:	a0 91 50 01 	lds	r26, 0x0150
     afa:	b0 91 51 01 	lds	r27, 0x0151
     afe:	80 93 52 01 	sts	0x0152, r24
     b02:	90 93 53 01 	sts	0x0153, r25
     b06:	a0 93 54 01 	sts	0x0154, r26
     b0a:	b0 93 55 01 	sts	0x0155, r27
     b0e:	80 91 4a 01 	lds	r24, 0x014A
     b12:	90 91 4b 01 	lds	r25, 0x014B
     b16:	a0 91 4c 01 	lds	r26, 0x014C
     b1a:	b0 91 4d 01 	lds	r27, 0x014D
     b1e:	80 93 4e 01 	sts	0x014E, r24
     b22:	90 93 4f 01 	sts	0x014F, r25
     b26:	a0 93 50 01 	sts	0x0150, r26
     b2a:	b0 93 51 01 	sts	0x0151, r27
     b2e:	80 91 46 01 	lds	r24, 0x0146
     b32:	90 91 47 01 	lds	r25, 0x0147
     b36:	a0 91 48 01 	lds	r26, 0x0148
     b3a:	b0 91 49 01 	lds	r27, 0x0149
     b3e:	80 93 4a 01 	sts	0x014A, r24
     b42:	90 93 4b 01 	sts	0x014B, r25
     b46:	a0 93 4c 01 	sts	0x014C, r26
     b4a:	b0 93 4d 01 	sts	0x014D, r27
     b4e:	80 91 42 01 	lds	r24, 0x0142
     b52:	90 91 43 01 	lds	r25, 0x0143
     b56:	a0 91 44 01 	lds	r26, 0x0144
     b5a:	b0 91 45 01 	lds	r27, 0x0145
     b5e:	80 93 46 01 	sts	0x0146, r24
     b62:	90 93 47 01 	sts	0x0147, r25
     b66:	a0 93 48 01 	sts	0x0148, r26
     b6a:	b0 93 49 01 	sts	0x0149, r27
     b6e:	80 91 3e 01 	lds	r24, 0x013E
     b72:	90 91 3f 01 	lds	r25, 0x013F
     b76:	a0 91 40 01 	lds	r26, 0x0140
     b7a:	b0 91 41 01 	lds	r27, 0x0141
     b7e:	80 93 42 01 	sts	0x0142, r24
     b82:	90 93 43 01 	sts	0x0143, r25
     b86:	a0 93 44 01 	sts	0x0144, r26
     b8a:	b0 93 45 01 	sts	0x0145, r27
     b8e:	80 91 3a 01 	lds	r24, 0x013A
     b92:	90 91 3b 01 	lds	r25, 0x013B
     b96:	a0 91 3c 01 	lds	r26, 0x013C
     b9a:	b0 91 3d 01 	lds	r27, 0x013D
     b9e:	80 93 3e 01 	sts	0x013E, r24
     ba2:	90 93 3f 01 	sts	0x013F, r25
     ba6:	a0 93 40 01 	sts	0x0140, r26
     baa:	b0 93 41 01 	sts	0x0141, r27
     bae:	80 91 2a 01 	lds	r24, 0x012A
     bb2:	90 91 2b 01 	lds	r25, 0x012B
     bb6:	a0 91 2c 01 	lds	r26, 0x012C
     bba:	b0 91 2d 01 	lds	r27, 0x012D
     bbe:	80 93 3a 01 	sts	0x013A, r24
     bc2:	90 93 3b 01 	sts	0x013B, r25
     bc6:	a0 93 3c 01 	sts	0x013C, r26
     bca:	b0 93 3d 01 	sts	0x013D, r27
     bce:	82 e3       	ldi	r24, 0x32	; 50
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	69 e0       	ldi	r22, 0x09	; 9
     bd4:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN13RunningMedian10getAverageEh>
     bd8:	60 93 2a 01 	sts	0x012A, r22
     bdc:	70 93 2b 01 	sts	0x012B, r23
     be0:	80 93 2c 01 	sts	0x012C, r24
     be4:	90 93 2d 01 	sts	0x012D, r25
     be8:	82 e3       	ldi	r24, 0x32	; 50
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN13RunningMedian8getCountEv>
     bf0:	18 2f       	mov	r17, r24
     bf2:	82 e3       	ldi	r24, 0x32	; 50
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZN13RunningMedian7getSizeEv>
     bfa:	18 17       	cp	r17, r24
     bfc:	08 f4       	brcc	.+2      	; 0xc00 <_Z7getDatav+0x150>
     bfe:	59 cf       	rjmp	.-334    	; 0xab2 <_Z7getDatav+0x2>
     c00:	1f 91       	pop	r17
     c02:	08 95       	ret

00000c04 <loop>:
     c04:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     c08:	20 91 2e 01 	lds	r18, 0x012E
     c0c:	30 91 2f 01 	lds	r19, 0x012F
     c10:	40 91 30 01 	lds	r20, 0x0130
     c14:	50 91 31 01 	lds	r21, 0x0131
     c18:	62 1b       	sub	r22, r18
     c1a:	73 0b       	sbc	r23, r19
     c1c:	84 0b       	sbc	r24, r20
     c1e:	95 0b       	sbc	r25, r21
     c20:	62 31       	cpi	r22, 0x12	; 18
     c22:	71 05       	cpc	r23, r1
     c24:	81 05       	cpc	r24, r1
     c26:	91 05       	cpc	r25, r1
     c28:	70 f0       	brcs	.+28     	; 0xc46 <loop+0x42>
     c2a:	0e 94 58 05 	call	0xab0	; 0xab0 <_Z7getDatav>
     c2e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_Z12triggerCheckv>
     c32:	60 91 2e 01 	lds	r22, 0x012E
     c36:	70 91 2f 01 	lds	r23, 0x012F
     c3a:	80 91 30 01 	lds	r24, 0x0130
     c3e:	90 91 31 01 	lds	r25, 0x0131
     c42:	0e 94 85 02 	call	0x50a	; 0x50a <_Z11diagnosticsm>
     c46:	80 91 5b 01 	lds	r24, 0x015B
     c4a:	88 23       	and	r24, r24
     c4c:	59 f1       	breq	.+86     	; 0xca4 <loop+0xa0>
     c4e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <millis>
     c52:	20 91 5d 01 	lds	r18, 0x015D
     c56:	30 91 5e 01 	lds	r19, 0x015E
     c5a:	40 91 5f 01 	lds	r20, 0x015F
     c5e:	50 91 60 01 	lds	r21, 0x0160
     c62:	62 1b       	sub	r22, r18
     c64:	73 0b       	sbc	r23, r19
     c66:	84 0b       	sbc	r24, r20
     c68:	95 0b       	sbc	r25, r21
     c6a:	60 33       	cpi	r22, 0x30	; 48
     c6c:	71 05       	cpc	r23, r1
     c6e:	81 05       	cpc	r24, r1
     c70:	91 05       	cpc	r25, r1
     c72:	c0 f0       	brcs	.+48     	; 0xca4 <loop+0xa0>
     c74:	80 91 61 01 	lds	r24, 0x0161
     c78:	90 91 62 01 	lds	r25, 0x0162
     c7c:	64 e0       	ldi	r22, 0x04	; 4
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	40 91 5c 01 	lds	r20, 0x015C
     c84:	0e 94 a7 04 	call	0x94e	; 0x94e <_Z10fadeOutputiih>
     c88:	90 93 62 01 	sts	0x0162, r25
     c8c:	80 93 61 01 	sts	0x0161, r24
     c90:	60 91 5d 01 	lds	r22, 0x015D
     c94:	70 91 5e 01 	lds	r23, 0x015E
     c98:	80 91 5f 01 	lds	r24, 0x015F
     c9c:	90 91 60 01 	lds	r25, 0x0160
     ca0:	0e 94 85 02 	call	0x50a	; 0x50a <_Z11diagnosticsm>
     ca4:	08 95       	ret

00000ca6 <setup>:
     ca6:	84 ef       	ldi	r24, 0xF4	; 244
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	52 ec       	ldi	r21, 0xC2	; 194
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN14HardwareSerial5beginEm>
     cb6:	84 ef       	ldi	r24, 0xF4	; 244
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN14HardwareSerialcvbEv>
     cbe:	88 23       	and	r24, r24
     cc0:	d1 f3       	breq	.-12     	; 0xcb6 <setup+0x10>
     cc2:	68 ee       	ldi	r22, 0xE8	; 232
     cc4:	73 e0       	ldi	r23, 0x03	; 3
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <delay>
     cce:	82 e1       	ldi	r24, 0x12	; 18
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	0e 94 81 09 	call	0x1302	; 0x1302 <pinMode>
     cd6:	82 e1       	ldi	r24, 0x12	; 18
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	0e 94 c0 09 	call	0x1380	; 0x1380 <digitalWrite>
     cde:	83 e1       	ldi	r24, 0x13	; 19
     ce0:	62 e0       	ldi	r22, 0x02	; 2
     ce2:	0e 94 81 09 	call	0x1302	; 0x1302 <pinMode>
     ce6:	81 e1       	ldi	r24, 0x11	; 17
     ce8:	62 e0       	ldi	r22, 0x02	; 2
     cea:	0e 94 81 09 	call	0x1302	; 0x1302 <pinMode>
     cee:	8d e0       	ldi	r24, 0x0D	; 13
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	0e 94 81 09 	call	0x1302	; 0x1302 <pinMode>
     cf6:	8d e0       	ldi	r24, 0x0D	; 13
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	0e 94 c0 09 	call	0x1380	; 0x1380 <digitalWrite>
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	0e 94 81 09 	call	0x1302	; 0x1302 <pinMode>
     d06:	84 e0       	ldi	r24, 0x04	; 4
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 c0 09 	call	0x1380	; 0x1380 <digitalWrite>
     d0e:	60 91 61 01 	lds	r22, 0x0161
     d12:	70 91 62 01 	lds	r23, 0x0162
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	0e 94 21 09 	call	0x1242	; 0x1242 <analogWrite>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	80 93 3a 01 	sts	0x013A, r24
     d28:	90 93 3b 01 	sts	0x013B, r25
     d2c:	a0 93 3c 01 	sts	0x013C, r26
     d30:	b0 93 3d 01 	sts	0x013D, r27
     d34:	80 93 3e 01 	sts	0x013E, r24
     d38:	90 93 3f 01 	sts	0x013F, r25
     d3c:	a0 93 40 01 	sts	0x0140, r26
     d40:	b0 93 41 01 	sts	0x0141, r27
     d44:	80 93 42 01 	sts	0x0142, r24
     d48:	90 93 43 01 	sts	0x0143, r25
     d4c:	a0 93 44 01 	sts	0x0144, r26
     d50:	b0 93 45 01 	sts	0x0145, r27
     d54:	80 93 46 01 	sts	0x0146, r24
     d58:	90 93 47 01 	sts	0x0147, r25
     d5c:	a0 93 48 01 	sts	0x0148, r26
     d60:	b0 93 49 01 	sts	0x0149, r27
     d64:	80 93 4a 01 	sts	0x014A, r24
     d68:	90 93 4b 01 	sts	0x014B, r25
     d6c:	a0 93 4c 01 	sts	0x014C, r26
     d70:	b0 93 4d 01 	sts	0x014D, r27
     d74:	08 95       	ret

00000d76 <_ZN13RunningMedian3addEf>:

// adds a new value to the data-set
// or overwrites the oldest if full.
void RunningMedian::add(float value)
     d76:	dc 01       	movw	r26, r24
{
    _ar[_idx++] = value;
     d78:	13 96       	adiw	r26, 0x03	; 3
     d7a:	2c 91       	ld	r18, X
     d7c:	13 97       	sbiw	r26, 0x03	; 3
     d7e:	82 2f       	mov	r24, r18
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	14 96       	adiw	r26, 0x04	; 4
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	15 97       	sbiw	r26, 0x05	; 5
     d92:	e8 0f       	add	r30, r24
     d94:	f9 1f       	adc	r31, r25
     d96:	40 83       	st	Z, r20
     d98:	51 83       	std	Z+1, r21	; 0x01
     d9a:	62 83       	std	Z+2, r22	; 0x02
     d9c:	73 83       	std	Z+3, r23	; 0x03
     d9e:	2f 5f       	subi	r18, 0xFF	; 255
     da0:	13 96       	adiw	r26, 0x03	; 3
     da2:	2c 93       	st	X, r18
     da4:	13 97       	sbiw	r26, 0x03	; 3
    if (_idx >= _size) _idx = 0; // wrap around
     da6:	11 96       	adiw	r26, 0x01	; 1
     da8:	8c 91       	ld	r24, X
     daa:	11 97       	sbiw	r26, 0x01	; 1
     dac:	28 17       	cp	r18, r24
     dae:	18 f0       	brcs	.+6      	; 0xdb6 <_ZN13RunningMedian3addEf+0x40>
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	1c 92       	st	X, r1
     db4:	13 97       	sbiw	r26, 0x03	; 3
    if (_cnt < _size) _cnt++;
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	9c 91       	ld	r25, X
     dba:	12 97       	sbiw	r26, 0x02	; 2
     dbc:	11 96       	adiw	r26, 0x01	; 1
     dbe:	8c 91       	ld	r24, X
     dc0:	11 97       	sbiw	r26, 0x01	; 1
     dc2:	98 17       	cp	r25, r24
     dc4:	20 f4       	brcc	.+8      	; 0xdce <_ZN13RunningMedian3addEf+0x58>
     dc6:	9f 5f       	subi	r25, 0xFF	; 255
     dc8:	12 96       	adiw	r26, 0x02	; 2
     dca:	9c 93       	st	X, r25
     dcc:	12 97       	sbiw	r26, 0x02	; 2
    _sorted = false;
     dce:	1c 92       	st	X, r1
}
     dd0:	08 95       	ret

00000dd2 <_ZN13RunningMedian7getSizeEv>:
        }
    }
    return NAN;
}

uint8_t RunningMedian::getSize() { return _size; };
     dd2:	fc 01       	movw	r30, r24
     dd4:	81 81       	ldd	r24, Z+1	; 0x01
     dd6:	08 95       	ret

00000dd8 <_ZN13RunningMedian8getCountEv>:

uint8_t RunningMedian::getCount() { return _cnt; };
     dd8:	fc 01       	movw	r30, r24
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	08 95       	ret

00000dde <_ZN13RunningMedian4sortEv>:
#endif

void RunningMedian::sort()
     dde:	7f 92       	push	r7
     de0:	8f 92       	push	r8
     de2:	9f 92       	push	r9
     de4:	af 92       	push	r10
     de6:	bf 92       	push	r11
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	8c 01       	movw	r16, r24
     dfa:	bb 24       	eor	r11, r11
     dfc:	46 c0       	rjmp	.+140    	; 0xe8a <_ZN13RunningMedian4sortEv+0xac>
    for (uint8_t i=0; i< _cnt-1; i++)
    {
        bool flag = true;
        for (uint8_t j=1; j< _cnt-i; j++)
        {
            if (_ar[_p[j-1]] > _ar[_p[j]])
     dfe:	f8 01       	movw	r30, r16
     e00:	a4 81       	ldd	r26, Z+4	; 0x04
     e02:	b5 81       	ldd	r27, Z+5	; 0x05
     e04:	86 81       	ldd	r24, Z+6	; 0x06
     e06:	97 81       	ldd	r25, Z+7	; 0x07
     e08:	21 97       	sbiw	r28, 0x01	; 1
     e0a:	7c 01       	movw	r14, r24
     e0c:	ec 0e       	add	r14, r28
     e0e:	fd 1e       	adc	r15, r29
     e10:	21 96       	adiw	r28, 0x01	; 1
     e12:	f7 01       	movw	r30, r14
     e14:	a0 80       	ld	r10, Z
     e16:	8c 0f       	add	r24, r28
     e18:	9d 1f       	adc	r25, r29
     e1a:	fc 01       	movw	r30, r24
     e1c:	c0 80       	ld	r12, Z
     e1e:	ea 2d       	mov	r30, r10
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	ea 0f       	add	r30, r26
     e2c:	fb 1f       	adc	r31, r27
     e2e:	8c 2d       	mov	r24, r12
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	a8 0f       	add	r26, r24
     e3c:	b9 1f       	adc	r27, r25
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	2d 91       	ld	r18, X+
     e48:	3d 91       	ld	r19, X+
     e4a:	4d 91       	ld	r20, X+
     e4c:	5c 91       	ld	r21, X
     e4e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__gesf2>
     e52:	18 16       	cp	r1, r24
     e54:	5c f4       	brge	.+22     	; 0xe6c <_ZN13RunningMedian4sortEv+0x8e>
            {
                uint8_t t = _p[j-1];
                _p[j-1] = _p[j];
     e56:	d7 01       	movw	r26, r14
     e58:	cc 92       	st	X, r12
                _p[j] = t;
     e5a:	d8 01       	movw	r26, r16
     e5c:	16 96       	adiw	r26, 0x06	; 6
     e5e:	ed 91       	ld	r30, X+
     e60:	fc 91       	ld	r31, X
     e62:	17 97       	sbiw	r26, 0x07	; 7
     e64:	ec 0f       	add	r30, r28
     e66:	fd 1f       	adc	r31, r29
     e68:	a0 82       	st	Z, r10
     e6a:	77 24       	eor	r7, r7
{
    // bubble sort with flag
    for (uint8_t i=0; i< _cnt-1; i++)
    {
        bool flag = true;
        for (uint8_t j=1; j< _cnt-i; j++)
     e6c:	d3 94       	inc	r13
     e6e:	cd 2d       	mov	r28, r13
     e70:	d0 e0       	ldi	r29, 0x00	; 0
     e72:	f8 01       	movw	r30, r16
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	88 19       	sub	r24, r8
     e7a:	99 09       	sbc	r25, r9
     e7c:	c8 17       	cp	r28, r24
     e7e:	d9 07       	cpc	r29, r25
     e80:	0c f4       	brge	.+2      	; 0xe84 <_ZN13RunningMedian4sortEv+0xa6>
     e82:	bd cf       	rjmp	.-134    	; 0xdfe <_ZN13RunningMedian4sortEv+0x20>
                _p[j-1] = _p[j];
                _p[j] = t;
                flag = false;
            }
        }
        if (flag) break;
     e84:	77 20       	and	r7, r7
     e86:	81 f4       	brne	.+32     	; 0xea8 <_ZN13RunningMedian4sortEv+0xca>
#endif

void RunningMedian::sort()
{
    // bubble sort with flag
    for (uint8_t i=0; i< _cnt-1; i++)
     e88:	b3 94       	inc	r11
     e8a:	8b 2c       	mov	r8, r11
     e8c:	99 24       	eor	r9, r9
     e8e:	d8 01       	movw	r26, r16
     e90:	12 96       	adiw	r26, 0x02	; 2
     e92:	8c 91       	ld	r24, X
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	88 16       	cp	r8, r24
     e9a:	99 06       	cpc	r9, r25
     e9c:	2c f4       	brge	.+10     	; 0xea8 <_ZN13RunningMedian4sortEv+0xca>
     e9e:	77 24       	eor	r7, r7
     ea0:	73 94       	inc	r7
     ea2:	dd 24       	eor	r13, r13
     ea4:	d3 94       	inc	r13
     ea6:	e3 cf       	rjmp	.-58     	; 0xe6e <_ZN13RunningMedian4sortEv+0x90>
            }
        }
        if (flag) break;
    }

    _sorted = true;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	9f 90       	pop	r9
     ec4:	8f 90       	pop	r8
     ec6:	7f 90       	pop	r7
     ec8:	08 95       	ret

00000eca <_ZN13RunningMedian10getAverageEh>:
        return sum / _cnt;
    }
    return NAN;
}

float RunningMedian::getAverage(uint8_t nMedians)
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ec 01       	movw	r28, r24
{
    if ((_cnt > 0) && (nMedians > 0))
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	88 23       	and	r24, r24
     ee4:	09 f4       	brne	.+2      	; 0xee8 <_ZN13RunningMedian10getAverageEh+0x1e>
     ee6:	50 c0       	rjmp	.+160    	; 0xf88 <_ZN13RunningMedian10getAverageEh+0xbe>
     ee8:	66 23       	and	r22, r22
     eea:	09 f4       	brne	.+2      	; 0xeee <_ZN13RunningMedian10getAverageEh+0x24>
     eec:	4d c0       	rjmp	.+154    	; 0xf88 <_ZN13RunningMedian10getAverageEh+0xbe>
     eee:	26 2f       	mov	r18, r22
     ef0:	86 17       	cp	r24, r22
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_ZN13RunningMedian10getAverageEh+0x2c>
     ef4:	28 2f       	mov	r18, r24
    {
        if (_cnt < nMedians) nMedians = _cnt;     // when filling the array for first time
        uint8_t start = ((_cnt - nMedians)/2);
     ef6:	a2 2e       	mov	r10, r18
     ef8:	bb 24       	eor	r11, r11
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	8a 19       	sub	r24, r10
     efe:	9b 09       	sbc	r25, r11
     f00:	62 e0       	ldi	r22, 0x02	; 2
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__divmodhi4>
     f08:	16 2f       	mov	r17, r22
        uint8_t stop = start + nMedians;
     f0a:	c6 2e       	mov	r12, r22
     f0c:	c2 0e       	add	r12, r18

        if (_sorted == false) sort();
     f0e:	88 81       	ld	r24, Y
     f10:	88 23       	and	r24, r24
     f12:	19 f4       	brne	.+6      	; 0xf1a <_ZN13RunningMedian10getAverageEh+0x50>
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN13RunningMedian4sortEv>
     f1a:	d1 2e       	mov	r13, r17
     f1c:	0f 2e       	mov	r0, r31
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	ef 2e       	mov	r14, r31
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	ff 2e       	mov	r15, r31
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	0f 2f       	mov	r16, r31
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	1f 2f       	mov	r17, r31
     f2e:	f0 2d       	mov	r31, r0
     f30:	19 c0       	rjmp	.+50     	; 0xf64 <_ZN13RunningMedian10getAverageEh+0x9a>

        float sum = 0;
        for (uint8_t i = start; i < stop; i++) sum += _ar[_p[i]];
     f32:	ee 81       	ldd	r30, Y+6	; 0x06
     f34:	ff 81       	ldd	r31, Y+7	; 0x07
     f36:	ed 0d       	add	r30, r13
     f38:	f1 1d       	adc	r31, r1
     f3a:	80 81       	ld	r24, Z
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	ec 81       	ldd	r30, Y+4	; 0x04
     f48:	fd 81       	ldd	r31, Y+5	; 0x05
     f4a:	e8 0f       	add	r30, r24
     f4c:	f9 1f       	adc	r31, r25
     f4e:	c8 01       	movw	r24, r16
     f50:	b7 01       	movw	r22, r14
     f52:	20 81       	ld	r18, Z
     f54:	31 81       	ldd	r19, Z+1	; 0x01
     f56:	42 81       	ldd	r20, Z+2	; 0x02
     f58:	53 81       	ldd	r21, Z+3	; 0x03
     f5a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__addsf3>
     f5e:	7b 01       	movw	r14, r22
     f60:	8c 01       	movw	r16, r24
     f62:	d3 94       	inc	r13
     f64:	dc 14       	cp	r13, r12
     f66:	28 f3       	brcs	.-54     	; 0xf32 <_ZN13RunningMedian10getAverageEh+0x68>
        return sum / nMedians;
     f68:	b5 01       	movw	r22, r10
     f6a:	88 27       	eor	r24, r24
     f6c:	77 fd       	sbrc	r23, 7
     f6e:	80 95       	com	r24
     f70:	98 2f       	mov	r25, r24
     f72:	0e 94 21 10 	call	0x2042	; 0x2042 <__floatsisf>
     f76:	9b 01       	movw	r18, r22
     f78:	ac 01       	movw	r20, r24
     f7a:	c8 01       	movw	r24, r16
     f7c:	b7 01       	movw	r22, r14
     f7e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__divsf3>
     f82:	e6 2f       	mov	r30, r22
     f84:	69 2f       	mov	r22, r25
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <_ZN13RunningMedian10getAverageEh+0xc6>
     f88:	e0 e0       	ldi	r30, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 ec       	ldi	r24, 0xC0	; 192
     f8e:	6f e7       	ldi	r22, 0x7F	; 127
    }
    return NAN;
}
     f90:	2e 2f       	mov	r18, r30
     f92:	37 2f       	mov	r19, r23
     f94:	48 2f       	mov	r20, r24
     f96:	56 2f       	mov	r21, r22
     f98:	b9 01       	movw	r22, r18
     f9a:	ca 01       	movw	r24, r20
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	cf 90       	pop	r12
     fac:	bf 90       	pop	r11
     fae:	af 90       	pop	r10
     fb0:	08 95       	ret

00000fb2 <_ZN13RunningMedianD1Ev>:
#endif

    clear();
}

RunningMedian::~RunningMedian()
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	8c 01       	movw	r16, r24
{
#ifdef RUNNING_MEDIAN_USE_MALLOC
    free(_ar);
     fb8:	fc 01       	movw	r30, r24
     fba:	84 81       	ldd	r24, Z+4	; 0x04
     fbc:	95 81       	ldd	r25, Z+5	; 0x05
     fbe:	0e 94 f5 01 	call	0x3ea	; 0x3ea <free>
    free(_p);
     fc2:	f8 01       	movw	r30, r16
     fc4:	86 81       	ldd	r24, Z+6	; 0x06
     fc6:	97 81       	ldd	r25, Z+7	; 0x07
     fc8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <free>
#endif
}
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <_ZN13RunningMedianC1Eh>:
// Released to the public domain
//

#include "RunningMedian.h"

RunningMedian::RunningMedian(uint8_t size)
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
{
    _size = constrain(size, MEDIAN_MIN_SIZE, MEDIAN_MAX_SIZE);
     fd8:	66 23       	and	r22, r22
     fda:	11 f4       	brne	.+4      	; 0xfe0 <_ZN13RunningMedianC1Eh+0xe>
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <_ZN13RunningMedianC1Eh+0x14>
     fe0:	64 31       	cpi	r22, 0x14	; 20
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <_ZN13RunningMedianC1Eh+0x14>
     fe4:	63 e1       	ldi	r22, 0x13	; 19
     fe6:	69 83       	std	Y+1, r22	; 0x01

#ifdef RUNNING_MEDIAN_USE_MALLOC
    _ar = (float *) malloc(_size * sizeof(float));
     fe8:	86 2f       	mov	r24, r22
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0e 94 4b 01 	call	0x296	; 0x296 <malloc>
     ff8:	8c 83       	std	Y+4, r24	; 0x04
     ffa:	9d 83       	std	Y+5, r25	; 0x05
    _p = (uint8_t *) malloc(_size * sizeof(uint8_t));
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 4b 01 	call	0x296	; 0x296 <malloc>
    1004:	8e 83       	std	Y+6, r24	; 0x06
    1006:	9f 83       	std	Y+7, r25	; 0x07
}

// resets all counters
void RunningMedian::clear()
{
    _cnt = 0;
    1008:	1a 82       	std	Y+2, r1	; 0x02
    _idx = 0;
    100a:	1b 82       	std	Y+3, r1	; 0x03
    _sorted = false;
    100c:	18 82       	st	Y, r1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	06 c0       	rjmp	.+12     	; 0x101e <_ZN13RunningMedianC1Eh+0x4c>

    for (uint8_t i=0; i< _size; i++) _p[i] = i;
    1012:	ee 81       	ldd	r30, Y+6	; 0x06
    1014:	ff 81       	ldd	r31, Y+7	; 0x07
    1016:	e9 0f       	add	r30, r25
    1018:	f1 1d       	adc	r31, r1
    101a:	90 83       	st	Z, r25
    101c:	9f 5f       	subi	r25, 0xFF	; 255
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	98 17       	cp	r25, r24
    1022:	b8 f3       	brcs	.-18     	; 0x1012 <_ZN13RunningMedianC1Eh+0x40>
    _ar = (float *) malloc(_size * sizeof(float));
    _p = (uint8_t *) malloc(_size * sizeof(uint8_t));
#endif

    clear();
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1040:	80 91 67 01 	lds	r24, 0x0167
    1044:	90 91 68 01 	lds	r25, 0x0168
    1048:	a0 91 69 01 	lds	r26, 0x0169
    104c:	b0 91 6a 01 	lds	r27, 0x016A
	unsigned char f = timer0_fract;
    1050:	30 91 6b 01 	lds	r19, 0x016B

	m += MILLIS_INC;
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	a1 1d       	adc	r26, r1
    1058:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    105a:	23 2f       	mov	r18, r19
    105c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    105e:	2d 37       	cpi	r18, 0x7D	; 125
    1060:	20 f0       	brcs	.+8      	; 0x106a <__vector_16+0x40>
		f -= FRACT_MAX;
    1062:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	a1 1d       	adc	r26, r1
    1068:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    106a:	20 93 6b 01 	sts	0x016B, r18
	timer0_millis = m;
    106e:	80 93 67 01 	sts	0x0167, r24
    1072:	90 93 68 01 	sts	0x0168, r25
    1076:	a0 93 69 01 	sts	0x0169, r26
    107a:	b0 93 6a 01 	sts	0x016A, r27
	timer0_overflow_count++;
    107e:	80 91 63 01 	lds	r24, 0x0163
    1082:	90 91 64 01 	lds	r25, 0x0164
    1086:	a0 91 65 01 	lds	r26, 0x0165
    108a:	b0 91 66 01 	lds	r27, 0x0166
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	a1 1d       	adc	r26, r1
    1092:	b1 1d       	adc	r27, r1
    1094:	80 93 63 01 	sts	0x0163, r24
    1098:	90 93 64 01 	sts	0x0164, r25
    109c:	a0 93 65 01 	sts	0x0165, r26
    10a0:	b0 93 66 01 	sts	0x0166, r27
}
    10a4:	bf 91       	pop	r27
    10a6:	af 91       	pop	r26
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	3f 91       	pop	r19
    10ae:	2f 91       	pop	r18
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    10ba:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    10bc:	f8 94       	cli
	m = timer0_millis;
    10be:	20 91 67 01 	lds	r18, 0x0167
    10c2:	30 91 68 01 	lds	r19, 0x0168
    10c6:	40 91 69 01 	lds	r20, 0x0169
    10ca:	50 91 6a 01 	lds	r21, 0x016A
	SREG = oldSREG;
    10ce:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    10d0:	b9 01       	movw	r22, r18
    10d2:	ca 01       	movw	r24, r20
    10d4:	08 95       	ret

000010d6 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10da:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    10dc:	f8 94       	cli
	m = timer0_overflow_count;
    10de:	80 91 63 01 	lds	r24, 0x0163
    10e2:	90 91 64 01 	lds	r25, 0x0164
    10e6:	a0 91 65 01 	lds	r26, 0x0165
    10ea:	b0 91 66 01 	lds	r27, 0x0166
#if defined(TCNT0)
	t = TCNT0;
    10ee:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    10f0:	a8 9b       	sbis	0x15, 0	; 21
    10f2:	05 c0       	rjmp	.+10     	; 0x10fe <delay+0x28>
    10f4:	6f 3f       	cpi	r22, 0xFF	; 255
    10f6:	19 f0       	breq	.+6      	; 0x10fe <delay+0x28>
		m++;
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	a1 1d       	adc	r26, r1
    10fc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    10fe:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1100:	ba 2f       	mov	r27, r26
    1102:	a9 2f       	mov	r26, r25
    1104:	98 2f       	mov	r25, r24
    1106:	88 27       	eor	r24, r24
    1108:	86 0f       	add	r24, r22
    110a:	91 1d       	adc	r25, r1
    110c:	a1 1d       	adc	r26, r1
    110e:	b1 1d       	adc	r27, r1
    1110:	62 e0       	ldi	r22, 0x02	; 2
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	aa 1f       	adc	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	6a 95       	dec	r22
    111c:	d1 f7       	brne	.-12     	; 0x1112 <delay+0x3c>
    111e:	bc 01       	movw	r22, r24
    1120:	2d c0       	rjmp	.+90     	; 0x117c <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1122:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1124:	f8 94       	cli
	m = timer0_overflow_count;
    1126:	80 91 63 01 	lds	r24, 0x0163
    112a:	90 91 64 01 	lds	r25, 0x0164
    112e:	a0 91 65 01 	lds	r26, 0x0165
    1132:	b0 91 66 01 	lds	r27, 0x0166
#if defined(TCNT0)
	t = TCNT0;
    1136:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1138:	a8 9b       	sbis	0x15, 0	; 21
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <delay+0x70>
    113c:	ef 3f       	cpi	r30, 0xFF	; 255
    113e:	19 f0       	breq	.+6      	; 0x1146 <delay+0x70>
		m++;
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	a1 1d       	adc	r26, r1
    1144:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1146:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1148:	ba 2f       	mov	r27, r26
    114a:	a9 2f       	mov	r26, r25
    114c:	98 2f       	mov	r25, r24
    114e:	88 27       	eor	r24, r24
    1150:	8e 0f       	add	r24, r30
    1152:	91 1d       	adc	r25, r1
    1154:	a1 1d       	adc	r26, r1
    1156:	b1 1d       	adc	r27, r1
    1158:	e2 e0       	ldi	r30, 0x02	; 2
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	aa 1f       	adc	r26, r26
    1160:	bb 1f       	adc	r27, r27
    1162:	ea 95       	dec	r30
    1164:	d1 f7       	brne	.-12     	; 0x115a <delay+0x84>
    1166:	86 1b       	sub	r24, r22
    1168:	97 0b       	sbc	r25, r23
    116a:	88 5e       	subi	r24, 0xE8	; 232
    116c:	93 40       	sbci	r25, 0x03	; 3
    116e:	c8 f2       	brcs	.-78     	; 0x1122 <delay+0x4c>
			ms--;
    1170:	21 50       	subi	r18, 0x01	; 1
    1172:	30 40       	sbci	r19, 0x00	; 0
    1174:	40 40       	sbci	r20, 0x00	; 0
    1176:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1178:	68 51       	subi	r22, 0x18	; 24
    117a:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	41 05       	cpc	r20, r1
    1182:	51 05       	cpc	r21, r1
    1184:	71 f6       	brne	.-100    	; 0x1122 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1186:	08 95       	ret

00001188 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1188:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    118a:	84 b5       	in	r24, 0x24	; 36
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1190:	84 b5       	in	r24, 0x24	; 36
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1196:	85 b5       	in	r24, 0x25	; 37
    1198:	82 60       	ori	r24, 0x02	; 2
    119a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    119c:	85 b5       	in	r24, 0x25	; 37
    119e:	81 60       	ori	r24, 0x01	; 1
    11a0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11a2:	ee e6       	ldi	r30, 0x6E	; 110
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	81 60       	ori	r24, 0x01	; 1
    11aa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11ac:	e1 e8       	ldi	r30, 0x81	; 129
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11b2:	80 81       	ld	r24, Z
    11b4:	82 60       	ori	r24, 0x02	; 2
    11b6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11b8:	80 81       	ld	r24, Z
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11be:	e0 e8       	ldi	r30, 0x80	; 128
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11c8:	e1 eb       	ldi	r30, 0xB1	; 177
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	84 60       	ori	r24, 0x04	; 4
    11d0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11d2:	e0 eb       	ldi	r30, 0xB0	; 176
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	81 60       	ori	r24, 0x01	; 1
    11da:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    11dc:	ea e7       	ldi	r30, 0x7A	; 122
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	84 60       	ori	r24, 0x04	; 4
    11e4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    11e6:	80 81       	ld	r24, Z
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    11ec:	80 81       	ld	r24, Z
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    11f2:	80 81       	ld	r24, Z
    11f4:	80 68       	ori	r24, 0x80	; 128
    11f6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    11f8:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    11fc:	08 95       	ret

000011fe <analogRead>:

int analogRead(uint8_t pin)
{
    11fe:	98 2f       	mov	r25, r24
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#elif defined(analogPinToChannel) && (defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__))
	pin = analogPinToChannel(pin);
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1200:	8e 30       	cpi	r24, 0x0E	; 14
    1202:	08 f0       	brcs	.+2      	; 0x1206 <analogRead+0x8>
    1204:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1206:	97 70       	andi	r25, 0x07	; 7
    1208:	80 91 16 01 	lds	r24, 0x0116
    120c:	82 95       	swap	r24
    120e:	88 0f       	add	r24, r24
    1210:	88 0f       	add	r24, r24
    1212:	80 7c       	andi	r24, 0xC0	; 192
    1214:	89 2b       	or	r24, r25
    1216:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    121a:	80 91 7a 00 	lds	r24, 0x007A
    121e:	80 64       	ori	r24, 0x40	; 64
    1220:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1224:	80 91 7a 00 	lds	r24, 0x007A
    1228:	86 fd       	sbrc	r24, 6
    122a:	fc cf       	rjmp	.-8      	; 0x1224 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    122c:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    1230:	40 91 79 00 	lds	r20, 0x0079
    1234:	94 2f       	mov	r25, r20
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	28 2b       	or	r18, r24
    123c:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    123e:	c9 01       	movw	r24, r18
    1240:	08 95       	ret

00001242 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	18 2f       	mov	r17, r24
    124a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	0e 94 81 09 	call	0x1302	; 0x1302 <pinMode>
	if (val == 0)
    1252:	20 97       	sbiw	r28, 0x00	; 0
    1254:	09 f4       	brne	.+2      	; 0x1258 <analogWrite+0x16>
    1256:	4a c0       	rjmp	.+148    	; 0x12ec <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    1258:	cf 3f       	cpi	r28, 0xFF	; 255
    125a:	d1 05       	cpc	r29, r1
    125c:	09 f4       	brne	.+2      	; 0x1260 <analogWrite+0x1e>
    125e:	49 c0       	rjmp	.+146    	; 0x12f2 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1260:	e1 2f       	mov	r30, r17
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	e9 5d       	subi	r30, 0xD9	; 217
    1266:	fd 4f       	sbci	r31, 0xFD	; 253
    1268:	84 91       	lpm	r24, Z+
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	c1 f0       	breq	.+48     	; 0x129e <analogWrite+0x5c>
    126e:	84 30       	cpi	r24, 0x04	; 4
    1270:	28 f4       	brcc	.+10     	; 0x127c <analogWrite+0x3a>
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	51 f0       	breq	.+20     	; 0x128a <analogWrite+0x48>
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	b1 f5       	brne	.+108    	; 0x12e6 <analogWrite+0xa4>
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <analogWrite+0x52>
    127c:	86 30       	cpi	r24, 0x06	; 6
    127e:	19 f1       	breq	.+70     	; 0x12c6 <analogWrite+0x84>
    1280:	87 30       	cpi	r24, 0x07	; 7
    1282:	49 f1       	breq	.+82     	; 0x12d6 <analogWrite+0x94>
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	79 f5       	brne	.+94     	; 0x12e6 <analogWrite+0xa4>
    1288:	14 c0       	rjmp	.+40     	; 0x12b2 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    128a:	84 b5       	in	r24, 0x24	; 36
    128c:	80 68       	ori	r24, 0x80	; 128
    128e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1290:	c7 bd       	out	0x27, r28	; 39
    1292:	33 c0       	rjmp	.+102    	; 0x12fa <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1294:	84 b5       	in	r24, 0x24	; 36
    1296:	80 62       	ori	r24, 0x20	; 32
    1298:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    129a:	c8 bd       	out	0x28, r28	; 40
    129c:	2e c0       	rjmp	.+92     	; 0x12fa <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    129e:	80 91 80 00 	lds	r24, 0x0080
    12a2:	80 68       	ori	r24, 0x80	; 128
    12a4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    12a8:	d0 93 89 00 	sts	0x0089, r29
    12ac:	c0 93 88 00 	sts	0x0088, r28
    12b0:	24 c0       	rjmp	.+72     	; 0x12fa <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    12b2:	80 91 80 00 	lds	r24, 0x0080
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    12bc:	d0 93 8b 00 	sts	0x008B, r29
    12c0:	c0 93 8a 00 	sts	0x008A, r28
    12c4:	1a c0       	rjmp	.+52     	; 0x12fa <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    12c6:	80 91 b0 00 	lds	r24, 0x00B0
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    12d0:	c0 93 b3 00 	sts	0x00B3, r28
    12d4:	12 c0       	rjmp	.+36     	; 0x12fa <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    12d6:	80 91 b0 00 	lds	r24, 0x00B0
    12da:	80 62       	ori	r24, 0x20	; 32
    12dc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    12e0:	c0 93 b4 00 	sts	0x00B4, r28
    12e4:	0a c0       	rjmp	.+20     	; 0x12fa <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    12e6:	c0 38       	cpi	r28, 0x80	; 128
    12e8:	d1 05       	cpc	r29, r1
    12ea:	1c f4       	brge	.+6      	; 0x12f2 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    12ec:	81 2f       	mov	r24, r17
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    12f2:	81 2f       	mov	r24, r17
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 c0 09 	call	0x1380	; 0x1380 <digitalWrite>
				}
		}
	}
}
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	08 95       	ret

00001302 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1306:	48 2f       	mov	r20, r24
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	ca 01       	movw	r24, r20
    130c:	8d 5e       	subi	r24, 0xED	; 237
    130e:	9d 4f       	sbci	r25, 0xFD	; 253
    1310:	fc 01       	movw	r30, r24
    1312:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    1314:	41 50       	subi	r20, 0x01	; 1
    1316:	5e 4f       	sbci	r21, 0xFE	; 254
    1318:	fa 01       	movw	r30, r20
    131a:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    131c:	88 23       	and	r24, r24
    131e:	69 f1       	breq	.+90     	; 0x137a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	fc 01       	movw	r30, r24
    1328:	ef 51       	subi	r30, 0x1F	; 31
    132a:	fe 4f       	sbci	r31, 0xFE	; 254
    132c:	a5 91       	lpm	r26, Z+
    132e:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    1330:	fc 01       	movw	r30, r24
    1332:	e5 51       	subi	r30, 0x15	; 21
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	c5 91       	lpm	r28, Z+
    1338:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    133a:	66 23       	and	r22, r22
    133c:	51 f4       	brne	.+20     	; 0x1352 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    133e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1340:	f8 94       	cli
		*reg &= ~bit;
    1342:	8c 91       	ld	r24, X
    1344:	93 2f       	mov	r25, r19
    1346:	90 95       	com	r25
    1348:	89 23       	and	r24, r25
    134a:	8c 93       	st	X, r24
		*out &= ~bit;
    134c:	88 81       	ld	r24, Y
    134e:	89 23       	and	r24, r25
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1352:	62 30       	cpi	r22, 0x02	; 2
    1354:	61 f4       	brne	.+24     	; 0x136e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1356:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1358:	f8 94       	cli
		*reg &= ~bit;
    135a:	8c 91       	ld	r24, X
    135c:	93 2f       	mov	r25, r19
    135e:	90 95       	com	r25
    1360:	89 23       	and	r24, r25
    1362:	8c 93       	st	X, r24
		*out |= bit;
    1364:	88 81       	ld	r24, Y
    1366:	83 2b       	or	r24, r19
    1368:	88 83       	st	Y, r24
		SREG = oldSREG;
    136a:	2f bf       	out	0x3f, r18	; 63
    136c:	06 c0       	rjmp	.+12     	; 0x137a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    136e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1370:	f8 94       	cli
		*reg |= bit;
    1372:	8c 91       	ld	r24, X
    1374:	83 2b       	or	r24, r19
    1376:	8c 93       	st	X, r24
		SREG = oldSREG;
    1378:	9f bf       	out	0x3f, r25	; 63
	}
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1380:	48 2f       	mov	r20, r24
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	ca 01       	movw	r24, r20
    1386:	89 5d       	subi	r24, 0xD9	; 217
    1388:	9d 4f       	sbci	r25, 0xFD	; 253
    138a:	fc 01       	movw	r30, r24
    138c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    138e:	ca 01       	movw	r24, r20
    1390:	8d 5e       	subi	r24, 0xED	; 237
    1392:	9d 4f       	sbci	r25, 0xFD	; 253
    1394:	fc 01       	movw	r30, r24
    1396:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1398:	41 50       	subi	r20, 0x01	; 1
    139a:	5e 4f       	sbci	r21, 0xFE	; 254
    139c:	fa 01       	movw	r30, r20
    139e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13a0:	33 23       	and	r19, r19
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <digitalWrite+0x26>
    13a4:	40 c0       	rjmp	.+128    	; 0x1426 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13a6:	22 23       	and	r18, r18
    13a8:	51 f1       	breq	.+84     	; 0x13fe <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    13aa:	23 30       	cpi	r18, 0x03	; 3
    13ac:	71 f0       	breq	.+28     	; 0x13ca <digitalWrite+0x4a>
    13ae:	24 30       	cpi	r18, 0x04	; 4
    13b0:	28 f4       	brcc	.+10     	; 0x13bc <digitalWrite+0x3c>
    13b2:	21 30       	cpi	r18, 0x01	; 1
    13b4:	a1 f0       	breq	.+40     	; 0x13de <digitalWrite+0x5e>
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	11 f5       	brne	.+68     	; 0x13fe <digitalWrite+0x7e>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <digitalWrite+0x64>
    13bc:	26 30       	cpi	r18, 0x06	; 6
    13be:	b1 f0       	breq	.+44     	; 0x13ec <digitalWrite+0x6c>
    13c0:	27 30       	cpi	r18, 0x07	; 7
    13c2:	c1 f0       	breq	.+48     	; 0x13f4 <digitalWrite+0x74>
    13c4:	24 30       	cpi	r18, 0x04	; 4
    13c6:	d9 f4       	brne	.+54     	; 0x13fe <digitalWrite+0x7e>
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13ca:	80 91 80 00 	lds	r24, 0x0080
    13ce:	8f 77       	andi	r24, 0x7F	; 127
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13d2:	80 91 80 00 	lds	r24, 0x0080
    13d6:	8f 7d       	andi	r24, 0xDF	; 223
    13d8:	80 93 80 00 	sts	0x0080, r24
    13dc:	10 c0       	rjmp	.+32     	; 0x13fe <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13de:	84 b5       	in	r24, 0x24	; 36
    13e0:	8f 77       	andi	r24, 0x7F	; 127
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13e4:	84 b5       	in	r24, 0x24	; 36
    13e6:	8f 7d       	andi	r24, 0xDF	; 223
    13e8:	84 bd       	out	0x24, r24	; 36
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13ec:	80 91 b0 00 	lds	r24, 0x00B0
    13f0:	8f 77       	andi	r24, 0x7F	; 127
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13f4:	80 91 b0 00 	lds	r24, 0x00B0
    13f8:	8f 7d       	andi	r24, 0xDF	; 223
    13fa:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    13fe:	e3 2f       	mov	r30, r19
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	e5 51       	subi	r30, 0x15	; 21
    1408:	fe 4f       	sbci	r31, 0xFE	; 254
    140a:	a5 91       	lpm	r26, Z+
    140c:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    140e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1410:	f8 94       	cli

	if (val == LOW) {
    1412:	66 23       	and	r22, r22
    1414:	21 f4       	brne	.+8      	; 0x141e <digitalWrite+0x9e>
		*out &= ~bit;
    1416:	8c 91       	ld	r24, X
    1418:	90 95       	com	r25
    141a:	89 23       	and	r24, r25
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    141e:	8c 91       	ld	r24, X
    1420:	89 2b       	or	r24, r25
    1422:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1424:	2f bf       	out	0x3f, r18	; 63
    1426:	08 95       	ret

00001428 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1428:	68 2f       	mov	r22, r24
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	cb 01       	movw	r24, r22
    142e:	89 5d       	subi	r24, 0xD9	; 217
    1430:	9d 4f       	sbci	r25, 0xFD	; 253
    1432:	fc 01       	movw	r30, r24
    1434:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1436:	cb 01       	movw	r24, r22
    1438:	8d 5e       	subi	r24, 0xED	; 237
    143a:	9d 4f       	sbci	r25, 0xFD	; 253
    143c:	fc 01       	movw	r30, r24
    143e:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    1440:	61 50       	subi	r22, 0x01	; 1
    1442:	7e 4f       	sbci	r23, 0xFE	; 254
    1444:	fb 01       	movw	r30, r22
    1446:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    1448:	99 23       	and	r25, r25
    144a:	19 f4       	brne	.+6      	; 0x1452 <digitalRead+0x2a>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3c c0       	rjmp	.+120    	; 0x14ca <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1452:	22 23       	and	r18, r18
    1454:	51 f1       	breq	.+84     	; 0x14aa <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1456:	23 30       	cpi	r18, 0x03	; 3
    1458:	71 f0       	breq	.+28     	; 0x1476 <digitalRead+0x4e>
    145a:	24 30       	cpi	r18, 0x04	; 4
    145c:	28 f4       	brcc	.+10     	; 0x1468 <digitalRead+0x40>
    145e:	21 30       	cpi	r18, 0x01	; 1
    1460:	a1 f0       	breq	.+40     	; 0x148a <digitalRead+0x62>
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	11 f5       	brne	.+68     	; 0x14aa <digitalRead+0x82>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <digitalRead+0x68>
    1468:	26 30       	cpi	r18, 0x06	; 6
    146a:	b1 f0       	breq	.+44     	; 0x1498 <digitalRead+0x70>
    146c:	27 30       	cpi	r18, 0x07	; 7
    146e:	c1 f0       	breq	.+48     	; 0x14a0 <digitalRead+0x78>
    1470:	24 30       	cpi	r18, 0x04	; 4
    1472:	d9 f4       	brne	.+54     	; 0x14aa <digitalRead+0x82>
    1474:	04 c0       	rjmp	.+8      	; 0x147e <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1476:	80 91 80 00 	lds	r24, 0x0080
    147a:	8f 77       	andi	r24, 0x7F	; 127
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    147e:	80 91 80 00 	lds	r24, 0x0080
    1482:	8f 7d       	andi	r24, 0xDF	; 223
    1484:	80 93 80 00 	sts	0x0080, r24
    1488:	10 c0       	rjmp	.+32     	; 0x14aa <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    148a:	84 b5       	in	r24, 0x24	; 36
    148c:	8f 77       	andi	r24, 0x7F	; 127
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1490:	84 b5       	in	r24, 0x24	; 36
    1492:	8f 7d       	andi	r24, 0xDF	; 223
    1494:	84 bd       	out	0x24, r24	; 36
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1498:	80 91 b0 00 	lds	r24, 0x00B0
    149c:	8f 77       	andi	r24, 0x7F	; 127
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    14a0:	80 91 b0 00 	lds	r24, 0x00B0
    14a4:	8f 7d       	andi	r24, 0xDF	; 223
    14a6:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    14aa:	89 2f       	mov	r24, r25
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	8b 50       	subi	r24, 0x0B	; 11
    14b4:	9e 4f       	sbci	r25, 0xFE	; 254
    14b6:	fc 01       	movw	r30, r24
    14b8:	a5 91       	lpm	r26, Z+
    14ba:	b4 91       	lpm	r27, Z+
    14bc:	8c 91       	ld	r24, X
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	84 23       	and	r24, r20
    14c4:	11 f0       	breq	.+4      	; 0x14ca <digitalRead+0xa2>
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    14ca:	c9 01       	movw	r24, r18
    14cc:	08 95       	ret

000014ce <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    14ce:	08 95       	ret

000014d0 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	4f 93       	push	r20
    14e0:	8f 93       	push	r24
    14e2:	9f 93       	push	r25
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    14e8:	80 91 c0 00 	lds	r24, 0x00C0
    14ec:	82 fd       	sbrc	r24, 2
    14ee:	1d c0       	rjmp	.+58     	; 0x152a <__vector_18+0x5a>
      unsigned char c = UDR0;
    14f0:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    14f4:	20 91 ac 01 	lds	r18, 0x01AC
    14f8:	30 91 ad 01 	lds	r19, 0x01AD

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	2f 73       	andi	r18, 0x3F	; 63
    1502:	30 70       	andi	r19, 0x00	; 0
    1504:	80 91 ae 01 	lds	r24, 0x01AE
    1508:	90 91 af 01 	lds	r25, 0x01AF
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	71 f0       	breq	.+28     	; 0x152e <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    1512:	e0 91 ac 01 	lds	r30, 0x01AC
    1516:	f0 91 ad 01 	lds	r31, 0x01AD
    151a:	e4 59       	subi	r30, 0x94	; 148
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	40 83       	st	Z, r20
    buffer->head = i;
    1520:	30 93 ad 01 	sts	0x01AD, r19
    1524:	20 93 ac 01 	sts	0x01AC, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    152a:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	4f 91       	pop	r20
    1538:	3f 91       	pop	r19
    153a:	2f 91       	pop	r18
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1546:	e0 91 00 02 	lds	r30, 0x0200
    154a:	f0 91 01 02 	lds	r31, 0x0201
    154e:	e0 5c       	subi	r30, 0xC0	; 192
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	81 91       	ld	r24, Z+
    1554:	91 91       	ld	r25, Z+
    1556:	20 81       	ld	r18, Z
    1558:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    155a:	82 1b       	sub	r24, r18
    155c:	93 0b       	sbc	r25, r19
    155e:	8f 73       	andi	r24, 0x3F	; 63
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	89 2b       	or	r24, r25
    1564:	11 f0       	breq	.+4      	; 0x156a <_Z14serialEventRunv+0x24>
    1566:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_Z11serialEventv>
    156a:	08 95       	ret

0000156c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1582:	20 91 f0 01 	lds	r18, 0x01F0
    1586:	30 91 f1 01 	lds	r19, 0x01F1
    158a:	80 91 f2 01 	lds	r24, 0x01F2
    158e:	90 91 f3 01 	lds	r25, 0x01F3
    1592:	28 17       	cp	r18, r24
    1594:	39 07       	cpc	r19, r25
    1596:	31 f4       	brne	.+12     	; 0x15a4 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1598:	80 91 c1 00 	lds	r24, 0x00C1
    159c:	8f 7d       	andi	r24, 0xDF	; 223
    159e:	80 93 c1 00 	sts	0x00C1, r24
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    15a4:	e0 91 f2 01 	lds	r30, 0x01F2
    15a8:	f0 91 f3 01 	lds	r31, 0x01F3
    15ac:	e0 55       	subi	r30, 0x50	; 80
    15ae:	fe 4f       	sbci	r31, 0xFE	; 254
    15b0:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    15b2:	80 91 f2 01 	lds	r24, 0x01F2
    15b6:	90 91 f3 01 	lds	r25, 0x01F3
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	8f 73       	andi	r24, 0x3F	; 63
    15be:	90 70       	andi	r25, 0x00	; 0
    15c0:	90 93 f3 01 	sts	0x01F3, r25
    15c4:	80 93 f2 01 	sts	0x01F2, r24
	
  #if defined(UDR0)
    UDR0 = c;
    15c8:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	1f 90       	pop	r1
    15e0:	18 95       	reti

000015e2 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	ec 01       	movw	r28, r24
    15f6:	7a 01       	movw	r14, r20
    15f8:	8b 01       	movw	r16, r22
    15fa:	dd 24       	eor	r13, r13
    15fc:	40 30       	cpi	r20, 0x00	; 0
    15fe:	81 ee       	ldi	r24, 0xE1	; 225
    1600:	58 07       	cpc	r21, r24
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	68 07       	cpc	r22, r24
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	78 07       	cpc	r23, r24
    160a:	11 f0       	breq	.+4      	; 0x1610 <_ZN14HardwareSerial5beginEm+0x2e>
    160c:	dd 24       	eor	r13, r13
    160e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	a9 2e       	mov	r10, r25
    1614:	b1 2c       	mov	r11, r1
    1616:	ec 89       	ldd	r30, Y+20	; 0x14
    1618:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    161a:	dd 20       	and	r13, r13
    161c:	69 f0       	breq	.+26     	; 0x1638 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    161e:	c5 01       	movw	r24, r10
    1620:	08 a0       	ldd	r0, Y+32	; 0x20
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <_ZN14HardwareSerial5beginEm+0x46>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <_ZN14HardwareSerial5beginEm+0x42>
    162c:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	79 e0       	ldi	r23, 0x09	; 9
    1632:	8d e3       	ldi	r24, 0x3D	; 61
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1638:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    163a:	60 e8       	ldi	r22, 0x80	; 128
    163c:	74 e8       	ldi	r23, 0x84	; 132
    163e:	8e e1       	ldi	r24, 0x1E	; 30
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a8 01       	movw	r20, r16
    1644:	97 01       	movw	r18, r14
    1646:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodsi4>
    164a:	21 50       	subi	r18, 0x01	; 1
    164c:	30 40       	sbci	r19, 0x00	; 0
    164e:	40 40       	sbci	r20, 0x00	; 0
    1650:	50 40       	sbci	r21, 0x00	; 0
    1652:	56 95       	lsr	r21
    1654:	47 95       	ror	r20
    1656:	37 95       	ror	r19
    1658:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    165a:	80 e1       	ldi	r24, 0x10	; 16
    165c:	20 30       	cpi	r18, 0x00	; 0
    165e:	38 07       	cpc	r19, r24
    1660:	20 f0       	brcs	.+8      	; 0x166a <_ZN14HardwareSerial5beginEm+0x88>
    1662:	dd 20       	and	r13, r13
    1664:	11 f0       	breq	.+4      	; 0x166a <_ZN14HardwareSerial5beginEm+0x88>
    1666:	dd 24       	eor	r13, r13
    1668:	d6 cf       	rjmp	.-84     	; 0x1616 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    166a:	e8 89       	ldd	r30, Y+16	; 0x10
    166c:	f9 89       	ldd	r31, Y+17	; 0x11
    166e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1670:	ea 89       	ldd	r30, Y+18	; 0x12
    1672:	fb 89       	ldd	r31, Y+19	; 0x13
    1674:	20 83       	st	Z, r18

  transmitting = false;
    1676:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    1678:	ee 89       	ldd	r30, Y+22	; 0x16
    167a:	ff 89       	ldd	r31, Y+23	; 0x17
    167c:	40 81       	ld	r20, Z
    167e:	21 e0       	ldi	r18, 0x01	; 1
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	c9 01       	movw	r24, r18
    1684:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1686:	02 c0       	rjmp	.+4      	; 0x168c <_ZN14HardwareSerial5beginEm+0xaa>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <_ZN14HardwareSerial5beginEm+0xa6>
    1690:	48 2b       	or	r20, r24
    1692:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1694:	ee 89       	ldd	r30, Y+22	; 0x16
    1696:	ff 89       	ldd	r31, Y+23	; 0x17
    1698:	40 81       	ld	r20, Z
    169a:	c9 01       	movw	r24, r18
    169c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <_ZN14HardwareSerial5beginEm+0xc2>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <_ZN14HardwareSerial5beginEm+0xbe>
    16a8:	48 2b       	or	r20, r24
    16aa:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    16ac:	ee 89       	ldd	r30, Y+22	; 0x16
    16ae:	ff 89       	ldd	r31, Y+23	; 0x17
    16b0:	40 81       	ld	r20, Z
    16b2:	c9 01       	movw	r24, r18
    16b4:	0e 8c       	ldd	r0, Y+30	; 0x1e
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <_ZN14HardwareSerial5beginEm+0xda>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <_ZN14HardwareSerial5beginEm+0xd6>
    16c0:	48 2b       	or	r20, r24
    16c2:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    16c4:	ee 89       	ldd	r30, Y+22	; 0x16
    16c6:	ff 89       	ldd	r31, Y+23	; 0x17
    16c8:	80 81       	ld	r24, Z
    16ca:	0f 8c       	ldd	r0, Y+31	; 0x1f
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <_ZN14HardwareSerial5beginEm+0xf0>
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <_ZN14HardwareSerial5beginEm+0xec>
    16d6:	20 95       	com	r18
    16d8:	28 23       	and	r18, r24
    16da:	20 83       	st	Z, r18
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	08 95       	ret

000016f0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    16f0:	dc 01       	movw	r26, r24
    16f2:	1c 96       	adiw	r26, 0x0c	; 12
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	1d 97       	sbiw	r26, 0x0d	; 13
    16fa:	e0 5c       	subi	r30, 0xC0	; 192
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	21 91       	ld	r18, Z+
    1700:	31 91       	ld	r19, Z+
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	28 1b       	sub	r18, r24
    1708:	39 0b       	sbc	r19, r25
    170a:	2f 73       	andi	r18, 0x3F	; 63
    170c:	30 70       	andi	r19, 0x00	; 0
}
    170e:	c9 01       	movw	r24, r18
    1710:	08 95       	ret

00001712 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1712:	dc 01       	movw	r26, r24
    1714:	1c 96       	adiw	r26, 0x0c	; 12
    1716:	ed 91       	ld	r30, X+
    1718:	fc 91       	ld	r31, X
    171a:	1d 97       	sbiw	r26, 0x0d	; 13
    171c:	e0 5c       	subi	r30, 0xC0	; 192
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	20 81       	ld	r18, Z
    1722:	31 81       	ldd	r19, Z+1	; 0x01
    1724:	e0 54       	subi	r30, 0x40	; 64
    1726:	f0 40       	sbci	r31, 0x00	; 0
    1728:	df 01       	movw	r26, r30
    172a:	ae 5b       	subi	r26, 0xBE	; 190
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	8d 91       	ld	r24, X+
    1730:	9c 91       	ld	r25, X
    1732:	11 97       	sbiw	r26, 0x01	; 1
    1734:	28 17       	cp	r18, r24
    1736:	39 07       	cpc	r19, r25
    1738:	19 f4       	brne	.+6      	; 0x1740 <_ZN14HardwareSerial4peekEv+0x2e>
    173a:	2f ef       	ldi	r18, 0xFF	; 255
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	07 c0       	rjmp	.+14     	; 0x174e <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1740:	8d 91       	ld	r24, X+
    1742:	9c 91       	ld	r25, X
    1744:	e8 0f       	add	r30, r24
    1746:	f9 1f       	adc	r31, r25
    1748:	80 81       	ld	r24, Z
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    174e:	c9 01       	movw	r24, r18
    1750:	08 95       	ret

00001752 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1752:	dc 01       	movw	r26, r24
    1754:	1c 96       	adiw	r26, 0x0c	; 12
    1756:	ed 91       	ld	r30, X+
    1758:	fc 91       	ld	r31, X
    175a:	1d 97       	sbiw	r26, 0x0d	; 13
    175c:	e0 5c       	subi	r30, 0xC0	; 192
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	20 81       	ld	r18, Z
    1762:	31 81       	ldd	r19, Z+1	; 0x01
    1764:	e0 54       	subi	r30, 0x40	; 64
    1766:	f0 40       	sbci	r31, 0x00	; 0
    1768:	df 01       	movw	r26, r30
    176a:	ae 5b       	subi	r26, 0xBE	; 190
    176c:	bf 4f       	sbci	r27, 0xFF	; 255
    176e:	8d 91       	ld	r24, X+
    1770:	9c 91       	ld	r25, X
    1772:	11 97       	sbiw	r26, 0x01	; 1
    1774:	28 17       	cp	r18, r24
    1776:	39 07       	cpc	r19, r25
    1778:	19 f4       	brne	.+6      	; 0x1780 <_ZN14HardwareSerial4readEv+0x2e>
    177a:	2f ef       	ldi	r18, 0xFF	; 255
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	10 c0       	rjmp	.+32     	; 0x17a0 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1780:	8d 91       	ld	r24, X+
    1782:	9c 91       	ld	r25, X
    1784:	11 97       	sbiw	r26, 0x01	; 1
    1786:	e8 0f       	add	r30, r24
    1788:	f9 1f       	adc	r31, r25
    178a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    178c:	8d 91       	ld	r24, X+
    178e:	9c 91       	ld	r25, X
    1790:	11 97       	sbiw	r26, 0x01	; 1
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	8f 73       	andi	r24, 0x3F	; 63
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	9c 93       	st	X, r25
    179c:	8e 93       	st	-X, r24
    return c;
    179e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    17a0:	c9 01       	movw	r24, r18
    17a2:	08 95       	ret

000017a4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    17a4:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    17a6:	91 96       	adiw	r26, 0x21	; 33
    17a8:	8c 91       	ld	r24, X
    17aa:	91 97       	sbiw	r26, 0x21	; 33
    17ac:	88 23       	and	r24, r24
    17ae:	39 f0       	breq	.+14     	; 0x17be <_ZN14HardwareSerial5flushEv+0x1a>
    17b0:	54 96       	adiw	r26, 0x14	; 20
    17b2:	ed 91       	ld	r30, X+
    17b4:	fc 91       	ld	r31, X
    17b6:	55 97       	sbiw	r26, 0x15	; 21
    17b8:	80 81       	ld	r24, Z
    17ba:	86 ff       	sbrs	r24, 6
    17bc:	f9 cf       	rjmp	.-14     	; 0x17b0 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    17be:	91 96       	adiw	r26, 0x21	; 33
    17c0:	1c 92       	st	X, r1
}
    17c2:	08 95       	ret

000017c4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    17ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    17cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    17ce:	e0 5c       	subi	r30, 0xC0	; 192
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	20 81       	ld	r18, Z
    17d4:	31 81       	ldd	r19, Z+1	; 0x01
    17d6:	e0 54       	subi	r30, 0x40	; 64
    17d8:	f0 40       	sbci	r31, 0x00	; 0
    17da:	2f 5f       	subi	r18, 0xFF	; 255
    17dc:	3f 4f       	sbci	r19, 0xFF	; 255
    17de:	2f 73       	andi	r18, 0x3F	; 63
    17e0:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    17e2:	df 01       	movw	r26, r30
    17e4:	ae 5b       	subi	r26, 0xBE	; 190
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	8d 91       	ld	r24, X+
    17ea:	9c 91       	ld	r25, X
    17ec:	11 97       	sbiw	r26, 0x01	; 1
    17ee:	28 17       	cp	r18, r24
    17f0:	39 07       	cpc	r19, r25
    17f2:	d1 f3       	breq	.-12     	; 0x17e8 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    17f4:	e0 5c       	subi	r30, 0xC0	; 192
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	e0 54       	subi	r30, 0x40	; 64
    17fe:	f0 40       	sbci	r31, 0x00	; 0
    1800:	e8 0f       	add	r30, r24
    1802:	f9 1f       	adc	r31, r25
    1804:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1806:	ee 85       	ldd	r30, Y+14	; 0x0e
    1808:	ff 85       	ldd	r31, Y+15	; 0x0f
    180a:	e0 5c       	subi	r30, 0xC0	; 192
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	31 83       	std	Z+1, r19	; 0x01
    1810:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1812:	ee 89       	ldd	r30, Y+22	; 0x16
    1814:	ff 89       	ldd	r31, Y+23	; 0x17
    1816:	20 81       	ld	r18, Z
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <_ZN14HardwareSerial5writeEh+0x60>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <_ZN14HardwareSerial5writeEh+0x5c>
    1828:	28 2b       	or	r18, r24
    182a:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    1830:	ec 89       	ldd	r30, Y+20	; 0x14
    1832:	fd 89       	ldd	r31, Y+21	; 0x15
    1834:	80 81       	ld	r24, Z
    1836:	80 64       	ori	r24, 0x40	; 64
    1838:	80 83       	st	Z, r24
  
  return 1;
}
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	08 95       	ret

00001844 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	08 95       	ret

00001848 <_GLOBAL__I_rx_buffer>:
    1848:	10 92 f7 01 	sts	0x01F7, r1
    184c:	10 92 f6 01 	sts	0x01F6, r1
    1850:	88 ee       	ldi	r24, 0xE8	; 232
    1852:	93 e0       	ldi	r25, 0x03	; 3
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	80 93 f8 01 	sts	0x01F8, r24
    185c:	90 93 f9 01 	sts	0x01F9, r25
    1860:	a0 93 fa 01 	sts	0x01FA, r26
    1864:	b0 93 fb 01 	sts	0x01FB, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1868:	8b e1       	ldi	r24, 0x1B	; 27
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	90 93 f5 01 	sts	0x01F5, r25
    1870:	80 93 f4 01 	sts	0x01F4, r24
{
  _rx_buffer = rx_buffer;
    1874:	8c e6       	ldi	r24, 0x6C	; 108
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	90 93 01 02 	sts	0x0201, r25
    187c:	80 93 00 02 	sts	0x0200, r24
  _tx_buffer = tx_buffer;
    1880:	80 eb       	ldi	r24, 0xB0	; 176
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	90 93 03 02 	sts	0x0203, r25
    1888:	80 93 02 02 	sts	0x0202, r24
  _ubrrh = ubrrh;
    188c:	85 ec       	ldi	r24, 0xC5	; 197
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	90 93 05 02 	sts	0x0205, r25
    1894:	80 93 04 02 	sts	0x0204, r24
  _ubrrl = ubrrl;
    1898:	84 ec       	ldi	r24, 0xC4	; 196
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	90 93 07 02 	sts	0x0207, r25
    18a0:	80 93 06 02 	sts	0x0206, r24
  _ucsra = ucsra;
    18a4:	80 ec       	ldi	r24, 0xC0	; 192
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	90 93 09 02 	sts	0x0209, r25
    18ac:	80 93 08 02 	sts	0x0208, r24
  _ucsrb = ucsrb;
    18b0:	81 ec       	ldi	r24, 0xC1	; 193
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	90 93 0b 02 	sts	0x020B, r25
    18b8:	80 93 0a 02 	sts	0x020A, r24
  _ucsrc = ucsrc;
    18bc:	82 ec       	ldi	r24, 0xC2	; 194
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	90 93 0d 02 	sts	0x020D, r25
    18c4:	80 93 0c 02 	sts	0x020C, r24
  _udr = udr;
    18c8:	86 ec       	ldi	r24, 0xC6	; 198
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	90 93 0f 02 	sts	0x020F, r25
    18d0:	80 93 0e 02 	sts	0x020E, r24
  _rxen = rxen;
    18d4:	84 e0       	ldi	r24, 0x04	; 4
    18d6:	80 93 10 02 	sts	0x0210, r24
  _txen = txen;
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	80 93 11 02 	sts	0x0211, r24
  _rxcie = rxcie;
    18e0:	87 e0       	ldi	r24, 0x07	; 7
    18e2:	80 93 12 02 	sts	0x0212, r24
  _udrie = udrie;
    18e6:	85 e0       	ldi	r24, 0x05	; 5
    18e8:	80 93 13 02 	sts	0x0213, r24
  _u2x = u2x;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	80 93 14 02 	sts	0x0214, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    18f2:	08 95       	ret

000018f4 <main>:
#include <Arduino.h>

int main(void)
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
{
	init();
    18f8:	0e 94 c4 08 	call	0x1188	; 0x1188 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    18fc:	0e 94 53 06 	call	0xca6	; 0xca6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1900:	c3 ea       	ldi	r28, 0xA3	; 163
    1902:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    1904:	0e 94 02 06 	call	0xc04	; 0xc04 <loop>
		if (serialEventRun) serialEventRun();
    1908:	20 97       	sbiw	r28, 0x00	; 0
    190a:	e1 f3       	breq	.-8      	; 0x1904 <main+0x10>
    190c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_Z14serialEventRunv>
    1910:	f9 cf       	rjmp	.-14     	; 0x1904 <main+0x10>

00001912 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	7c 01       	movw	r14, r24
    1924:	6b 01       	movw	r12, r22
    1926:	8a 01       	movw	r16, r20
    1928:	c0 e0       	ldi	r28, 0x00	; 0
    192a:	d0 e0       	ldi	r29, 0x00	; 0
    192c:	0f c0       	rjmp	.+30     	; 0x194c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    192e:	d6 01       	movw	r26, r12
    1930:	6d 91       	ld	r22, X+
    1932:	6d 01       	movw	r12, r26
    1934:	d7 01       	movw	r26, r14
    1936:	ed 91       	ld	r30, X+
    1938:	fc 91       	ld	r31, X
    193a:	01 90       	ld	r0, Z+
    193c:	f0 81       	ld	r31, Z
    193e:	e0 2d       	mov	r30, r0
    1940:	c7 01       	movw	r24, r14
    1942:	09 95       	icall
    1944:	c8 0f       	add	r28, r24
    1946:	d9 1f       	adc	r29, r25
    1948:	01 50       	subi	r16, 0x01	; 1
    194a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    194c:	01 15       	cp	r16, r1
    194e:	11 05       	cpc	r17, r1
    1950:	71 f7       	brne	.-36     	; 0x192e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1952:	ce 01       	movw	r24, r28
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	08 95       	ret

00001966 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    1974:	8b 01       	movw	r16, r22
    1976:	c0 e0       	ldi	r28, 0x00	; 0
    1978:	d0 e0       	ldi	r29, 0x00	; 0
    197a:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    197c:	0f 5f       	subi	r16, 0xFF	; 255
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    1982:	66 23       	and	r22, r22
    1984:	59 f0       	breq	.+22     	; 0x199c <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    1986:	d7 01       	movw	r26, r14
    1988:	ed 91       	ld	r30, X+
    198a:	fc 91       	ld	r31, X
    198c:	01 90       	ld	r0, Z+
    198e:	f0 81       	ld	r31, Z
    1990:	e0 2d       	mov	r30, r0
    1992:	c7 01       	movw	r24, r14
    1994:	09 95       	icall
    1996:	c8 0f       	add	r28, r24
    1998:	d9 1f       	adc	r29, r25
    199a:	ef cf       	rjmp	.-34     	; 0x197a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    199c:	ce 01       	movw	r24, r28
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	08 95       	ret

000019ac <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    19ac:	dc 01       	movw	r26, r24
{
  return write(c);
    19ae:	ed 91       	ld	r30, X+
    19b0:	fc 91       	ld	r31, X
    19b2:	01 90       	ld	r0, Z+
    19b4:	f0 81       	ld	r31, Z
    19b6:	e0 2d       	mov	r30, r0
    19b8:	09 95       	icall
}
    19ba:	08 95       	ret

000019bc <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    19c6:	dc 01       	movw	r26, r24
    19c8:	ed 91       	ld	r30, X+
    19ca:	fc 91       	ld	r31, X
    19cc:	01 90       	ld	r0, Z+
    19ce:	f0 81       	ld	r31, Z
    19d0:	e0 2d       	mov	r30, r0
    19d2:	6d e0       	ldi	r22, 0x0D	; 13
    19d4:	09 95       	icall
    19d6:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    19d8:	d8 01       	movw	r26, r16
    19da:	ed 91       	ld	r30, X+
    19dc:	fc 91       	ld	r31, X
    19de:	01 90       	ld	r0, Z+
    19e0:	f0 81       	ld	r31, Z
    19e2:	e0 2d       	mov	r30, r0
    19e4:	c8 01       	movw	r24, r16
    19e6:	6a e0       	ldi	r22, 0x0A	; 10
    19e8:	09 95       	icall
    19ea:	9c 01       	movw	r18, r24
    19ec:	2e 0d       	add	r18, r14
    19ee:	3f 1d       	adc	r19, r15
    19f0:	c9 01       	movw	r24, r18
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	08 95       	ret

000019fc <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    1a06:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN5Print5printEPK19__FlashStringHelper>
    1a0a:	8c 01       	movw	r16, r24
  n += println();
    1a0c:	c7 01       	movw	r24, r14
    1a0e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN5Print7printlnEv>
    1a12:	9c 01       	movw	r18, r24
    1a14:	20 0f       	add	r18, r16
    1a16:	31 1f       	adc	r19, r17
  return n;
}
    1a18:	c9 01       	movw	r24, r18
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	08 95       	ret

00001a24 <_ZN5Print5writeEPKc>:
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	ec 01       	movw	r28, r24
    1a2a:	61 15       	cp	r22, r1
    1a2c:	71 05       	cpc	r23, r1
    1a2e:	19 f4       	brne	.+6      	; 0x1a36 <_ZN5Print5writeEPKc+0x12>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <_ZN5Print5writeEPKc+0x30>
    1a36:	db 01       	movw	r26, r22
    1a38:	0d 90       	ld	r0, X+
    1a3a:	00 20       	and	r0, r0
    1a3c:	e9 f7       	brne	.-6      	; 0x1a38 <_ZN5Print5writeEPKc+0x14>
    1a3e:	11 97       	sbiw	r26, 0x01	; 1
    1a40:	a6 1b       	sub	r26, r22
    1a42:	b7 0b       	sbc	r27, r23
    1a44:	e8 81       	ld	r30, Y
    1a46:	f9 81       	ldd	r31, Y+1	; 0x01
    1a48:	02 80       	ldd	r0, Z+2	; 0x02
    1a4a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a4c:	e0 2d       	mov	r30, r0
    1a4e:	ad 01       	movw	r20, r26
    1a50:	09 95       	icall
    1a52:	9c 01       	movw	r18, r24
    1a54:	c9 01       	movw	r24, r18
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1a5c:	4f 92       	push	r4
    1a5e:	5f 92       	push	r5
    1a60:	7f 92       	push	r7
    1a62:	8f 92       	push	r8
    1a64:	9f 92       	push	r9
    1a66:	af 92       	push	r10
    1a68:	bf 92       	push	r11
    1a6a:	cf 92       	push	r12
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	a1 97       	sbiw	r28, 0x21	; 33
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	2c 01       	movw	r4, r24
    1a8c:	74 2e       	mov	r7, r20
    1a8e:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1a90:	22 30       	cpi	r18, 0x02	; 2
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <_ZN5Print11printNumberEmh+0x3a>
    1a94:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1a96:	19 a2       	std	Y+33, r1	; 0x21
    1a98:	31 e2       	ldi	r19, 0x21	; 33
    1a9a:	c3 2e       	mov	r12, r19
    1a9c:	d1 2c       	mov	r13, r1
    1a9e:	cc 0e       	add	r12, r28
    1aa0:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1aa2:	82 2e       	mov	r8, r18
    1aa4:	99 24       	eor	r9, r9
    1aa6:	aa 24       	eor	r10, r10
    1aa8:	bb 24       	eor	r11, r11
    1aaa:	67 2d       	mov	r22, r7
    1aac:	75 2f       	mov	r23, r21
    1aae:	a5 01       	movw	r20, r10
    1ab0:	94 01       	movw	r18, r8
    1ab2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodsi4>
    1ab6:	79 01       	movw	r14, r18
    1ab8:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1aba:	c8 01       	movw	r24, r16
    1abc:	b7 01       	movw	r22, r14
    1abe:	a5 01       	movw	r20, r10
    1ac0:	94 01       	movw	r18, r8
    1ac2:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsi3>
    1ac6:	47 2d       	mov	r20, r7
    1ac8:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1aca:	08 94       	sec
    1acc:	c1 08       	sbc	r12, r1
    1ace:	d1 08       	sbc	r13, r1
    1ad0:	4a 30       	cpi	r20, 0x0A	; 10
    1ad2:	14 f4       	brge	.+4      	; 0x1ad8 <_ZN5Print11printNumberEmh+0x7c>
    1ad4:	40 5d       	subi	r20, 0xD0	; 208
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <_ZN5Print11printNumberEmh+0x7e>
    1ad8:	49 5c       	subi	r20, 0xC9	; 201
    1ada:	f6 01       	movw	r30, r12
    1adc:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1ade:	e1 14       	cp	r14, r1
    1ae0:	f1 04       	cpc	r15, r1
    1ae2:	01 05       	cpc	r16, r1
    1ae4:	11 05       	cpc	r17, r1
    1ae6:	21 f0       	breq	.+8      	; 0x1af0 <_ZN5Print11printNumberEmh+0x94>
    1ae8:	7e 2c       	mov	r7, r14
    1aea:	5f 2d       	mov	r21, r15
    1aec:	c8 01       	movw	r24, r16
    1aee:	dd cf       	rjmp	.-70     	; 0x1aaa <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1af0:	c2 01       	movw	r24, r4
    1af2:	b6 01       	movw	r22, r12
    1af4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN5Print5writeEPKc>
}
    1af8:	a1 96       	adiw	r28, 0x21	; 33
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	7f 90       	pop	r7
    1b1e:	5f 90       	pop	r5
    1b20:	4f 90       	pop	r4
    1b22:	08 95       	ret

00001b24 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1b24:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1b26:	21 15       	cp	r18, r1
    1b28:	31 05       	cpc	r19, r1
    1b2a:	41 f4       	brne	.+16     	; 0x1b3c <_ZN5Print5printEmi+0x18>
    1b2c:	ed 91       	ld	r30, X+
    1b2e:	fc 91       	ld	r31, X
    1b30:	01 90       	ld	r0, Z+
    1b32:	f0 81       	ld	r31, Z
    1b34:	e0 2d       	mov	r30, r0
    1b36:	64 2f       	mov	r22, r20
    1b38:	09 95       	icall
    1b3a:	08 95       	ret
  else return printNumber(n, base);
    1b3c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN5Print11printNumberEmh>
}
    1b40:	08 95       	ret

00001b42 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    1b4c:	7b 01       	movw	r14, r22
    1b4e:	00 e0       	ldi	r16, 0x00	; 0
    1b50:	10 e0       	ldi	r17, 0x00	; 0
    1b52:	b8 01       	movw	r22, r16
    1b54:	a7 01       	movw	r20, r14
    1b56:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN5Print5printEmi>
}
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	08 95       	ret

00001b64 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    1b6e:	e6 2e       	mov	r14, r22
    1b70:	ff 24       	eor	r15, r15
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	10 e0       	ldi	r17, 0x00	; 0
    1b76:	b8 01       	movw	r22, r16
    1b78:	a7 01       	movw	r20, r14
    1b7a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN5Print5printEmi>
}
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	08 95       	ret

00001b88 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
    1b9a:	6a 01       	movw	r12, r20
    1b9c:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    1b9e:	21 15       	cp	r18, r1
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	41 f4       	brne	.+16     	; 0x1bb4 <_ZN5Print5printEli+0x2c>
    return write(n);
    1ba4:	e8 81       	ld	r30, Y
    1ba6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba8:	01 90       	ld	r0, Z+
    1baa:	f0 81       	ld	r31, Z
    1bac:	e0 2d       	mov	r30, r0
    1bae:	64 2f       	mov	r22, r20
    1bb0:	09 95       	icall
    1bb2:	1f c0       	rjmp	.+62     	; 0x1bf2 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    1bb4:	2a 30       	cpi	r18, 0x0A	; 10
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	d1 f4       	brne	.+52     	; 0x1bee <_ZN5Print5printEli+0x66>
    if (n < 0) {
    1bba:	77 ff       	sbrs	r23, 7
    1bbc:	17 c0       	rjmp	.+46     	; 0x1bec <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1bbe:	e8 81       	ld	r30, Y
    1bc0:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc2:	01 90       	ld	r0, Z+
    1bc4:	f0 81       	ld	r31, Z
    1bc6:	e0 2d       	mov	r30, r0
    1bc8:	6d e2       	ldi	r22, 0x2D	; 45
    1bca:	09 95       	icall
    1bcc:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    1bce:	44 27       	eor	r20, r20
    1bd0:	55 27       	eor	r21, r21
    1bd2:	ba 01       	movw	r22, r20
    1bd4:	4c 19       	sub	r20, r12
    1bd6:	5d 09       	sbc	r21, r13
    1bd8:	6e 09       	sbc	r22, r14
    1bda:	7f 09       	sbc	r23, r15
    1bdc:	ce 01       	movw	r24, r28
    1bde:	2a e0       	ldi	r18, 0x0A	; 10
    1be0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN5Print11printNumberEmh>
    1be4:	98 01       	movw	r18, r16
    1be6:	28 0f       	add	r18, r24
    1be8:	39 1f       	adc	r19, r25
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    1bec:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1bee:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN5Print11printNumberEmh>
    1bf2:	9c 01       	movw	r18, r24
  }
}
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	08 95       	ret

00001c08 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	7b 01       	movw	r14, r22
    1c12:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    1c14:	00 27       	eor	r16, r16
    1c16:	f7 fc       	sbrc	r15, 7
    1c18:	00 95       	com	r16
    1c1a:	10 2f       	mov	r17, r16
    1c1c:	b8 01       	movw	r22, r16
    1c1e:	a7 01       	movw	r20, r14
    1c20:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEli>
}
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	08 95       	ret

00001c2e <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    1c2e:	cf 92       	push	r12
    1c30:	df 92       	push	r13
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	6c 01       	movw	r12, r24
    1c3c:	7b 01       	movw	r14, r22
    1c3e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1c40:	00 27       	eor	r16, r16
    1c42:	f7 fc       	sbrc	r15, 7
    1c44:	00 95       	com	r16
    1c46:	10 2f       	mov	r17, r16
    1c48:	b8 01       	movw	r22, r16
    1c4a:	a7 01       	movw	r20, r14
    1c4c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEli>
    1c50:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1c52:	c6 01       	movw	r24, r12
    1c54:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN5Print7printlnEv>
    1c58:	08 0f       	add	r16, r24
    1c5a:	19 1f       	adc	r17, r25
  return n;
}
    1c5c:	c8 01       	movw	r24, r16
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	08 95       	ret

00001c6c <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    1c6c:	7f 92       	push	r7
    1c6e:	8f 92       	push	r8
    1c70:	9f 92       	push	r9
    1c72:	af 92       	push	r10
    1c74:	bf 92       	push	r11
    1c76:	cf 92       	push	r12
    1c78:	df 92       	push	r13
    1c7a:	ef 92       	push	r14
    1c7c:	ff 92       	push	r15
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	4c 01       	movw	r8, r24
    1c88:	7a 01       	movw	r14, r20
    1c8a:	8b 01       	movw	r16, r22
    1c8c:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1c8e:	cb 01       	movw	r24, r22
    1c90:	ba 01       	movw	r22, r20
    1c92:	a8 01       	movw	r20, r16
    1c94:	97 01       	movw	r18, r14
    1c96:	0e 94 38 11 	call	0x2270	; 0x2270 <__unordsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	21 f0       	breq	.+8      	; 0x1ca6 <_ZN5Print10printFloatEdh+0x3a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1c9e:	c4 01       	movw	r24, r8
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	71 e0       	ldi	r23, 0x01	; 1
    1ca4:	21 c0       	rjmp	.+66     	; 0x1ce8 <_ZN5Print10printFloatEdh+0x7c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1ca6:	c0 e0       	ldi	r28, 0x00	; 0
    1ca8:	d0 e0       	ldi	r29, 0x00	; 0
    1caa:	57 01       	movw	r10, r14
    1cac:	68 01       	movw	r12, r16
    1cae:	e8 94       	clt
    1cb0:	d7 f8       	bld	r13, 7
    1cb2:	c6 01       	movw	r24, r12
    1cb4:	b5 01       	movw	r22, r10
    1cb6:	2f ef       	ldi	r18, 0xFF	; 255
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	5f e7       	ldi	r21, 0x7F	; 127
    1cbe:	0e 94 38 11 	call	0x2270	; 0x2270 <__unordsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	51 f4       	brne	.+20     	; 0x1cda <_ZN5Print10printFloatEdh+0x6e>
    1cc6:	c6 01       	movw	r24, r12
    1cc8:	b5 01       	movw	r22, r10
    1cca:	2f ef       	ldi	r18, 0xFF	; 255
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	5f e7       	ldi	r21, 0x7F	; 127
    1cd2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	14 f0       	brlt	.+4      	; 0x1cde <_ZN5Print10printFloatEdh+0x72>
    1cda:	c1 e0       	ldi	r28, 0x01	; 1
    1cdc:	d0 e0       	ldi	r29, 0x00	; 0
    1cde:	21 97       	sbiw	r28, 0x01	; 1
    1ce0:	39 f0       	breq	.+14     	; 0x1cf0 <_ZN5Print10printFloatEdh+0x84>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1ce2:	c4 01       	movw	r24, r8
    1ce4:	64 e0       	ldi	r22, 0x04	; 4
    1ce6:	71 e0       	ldi	r23, 0x01	; 1
    1ce8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN5Print5writeEPKc>
    1cec:	ec 01       	movw	r28, r24
    1cee:	93 c0       	rjmp	.+294    	; 0x1e16 <_ZN5Print10printFloatEdh+0x1aa>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	2f ef       	ldi	r18, 0xFF	; 255
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	5f e4       	ldi	r21, 0x4F	; 79
    1cfc:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__gesf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	54 f0       	brlt	.+20     	; 0x1d18 <_ZN5Print10printFloatEdh+0xac>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1d04:	c8 01       	movw	r24, r16
    1d06:	b7 01       	movw	r22, r14
    1d08:	2f ef       	ldi	r18, 0xFF	; 255
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	5f ec       	ldi	r21, 0xCF	; 207
    1d10:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	24 f4       	brge	.+8      	; 0x1d20 <_ZN5Print10printFloatEdh+0xb4>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1d18:	c4 01       	movw	r24, r8
    1d1a:	68 e0       	ldi	r22, 0x08	; 8
    1d1c:	71 e0       	ldi	r23, 0x01	; 1
    1d1e:	e4 cf       	rjmp	.-56     	; 0x1ce8 <_ZN5Print10printFloatEdh+0x7c>
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    1d20:	c8 01       	movw	r24, r16
    1d22:	b7 01       	movw	r22, r14
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__cmpsf2>
    1d30:	87 fd       	sbrc	r24, 7
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <_ZN5Print10printFloatEdh+0xce>
    1d34:	c0 e0       	ldi	r28, 0x00	; 0
    1d36:	d0 e0       	ldi	r29, 0x00	; 0
    1d38:	0e c0       	rjmp	.+28     	; 0x1d56 <_ZN5Print10printFloatEdh+0xea>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1d3a:	d4 01       	movw	r26, r8
    1d3c:	ed 91       	ld	r30, X+
    1d3e:	fc 91       	ld	r31, X
    1d40:	01 90       	ld	r0, Z+
    1d42:	f0 81       	ld	r31, Z
    1d44:	e0 2d       	mov	r30, r0
    1d46:	c4 01       	movw	r24, r8
    1d48:	6d e2       	ldi	r22, 0x2D	; 45
    1d4a:	09 95       	icall
    1d4c:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1d4e:	17 fb       	bst	r17, 7
    1d50:	10 95       	com	r17
    1d52:	17 f9       	bld	r17, 7
    1d54:	10 95       	com	r17
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	dd 24       	eor	r13, r13
    1d60:	0b c0       	rjmp	.+22     	; 0x1d78 <_ZN5Print10printFloatEdh+0x10c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1d62:	ca 01       	movw	r24, r20
    1d64:	b9 01       	movw	r22, r18
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__divsf3>
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1d76:	d3 94       	inc	r13
    1d78:	d7 14       	cp	r13, r7
    1d7a:	98 f3       	brcs	.-26     	; 0x1d62 <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
  
  number += rounding;
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	b7 01       	movw	r22, r14
    1d80:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__addsf3>
    1d84:	5b 01       	movw	r10, r22
    1d86:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1d88:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
    1d8c:	7b 01       	movw	r14, r22
    1d8e:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    1d90:	c4 01       	movw	r24, r8
    1d92:	b8 01       	movw	r22, r16
    1d94:	a7 01       	movw	r20, r14
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN5Print5printEmi>
    1d9e:	c8 0f       	add	r28, r24
    1da0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1da2:	77 20       	and	r7, r7
    1da4:	39 f0       	breq	.+14     	; 0x1db4 <_ZN5Print10printFloatEdh+0x148>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1da6:	c4 01       	movw	r24, r8
    1da8:	6c e0       	ldi	r22, 0x0C	; 12
    1daa:	71 e0       	ldi	r23, 0x01	; 1
    1dac:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1db0:	c8 0f       	add	r28, r24
    1db2:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1db4:	c8 01       	movw	r24, r16
    1db6:	b7 01       	movw	r22, r14
    1db8:	0e 94 1f 10 	call	0x203e	; 0x203e <__floatunsisf>
    1dbc:	9b 01       	movw	r18, r22
    1dbe:	ac 01       	movw	r20, r24
    1dc0:	c6 01       	movw	r24, r12
    1dc2:	b5 01       	movw	r22, r10
    1dc4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__subsf3>
    1dc8:	24 c0       	rjmp	.+72     	; 0x1e12 <_ZN5Print10printFloatEdh+0x1a6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__mulsf3>
    1dd6:	7b 01       	movw	r14, r22
    1dd8:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    1dda:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixsfsi>
    1dde:	5b 01       	movw	r10, r22
    1de0:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1de2:	cc 24       	eor	r12, r12
    1de4:	b7 fc       	sbrc	r11, 7
    1de6:	c0 94       	com	r12
    1de8:	dc 2c       	mov	r13, r12
    1dea:	c4 01       	movw	r24, r8
    1dec:	b6 01       	movw	r22, r12
    1dee:	a5 01       	movw	r20, r10
    1df0:	2a e0       	ldi	r18, 0x0A	; 10
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1df8:	c8 0f       	add	r28, r24
    1dfa:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1dfc:	c6 01       	movw	r24, r12
    1dfe:	b5 01       	movw	r22, r10
    1e00:	0e 94 21 10 	call	0x2042	; 0x2042 <__floatsisf>
    1e04:	9b 01       	movw	r18, r22
    1e06:	ac 01       	movw	r20, r24
    1e08:	c8 01       	movw	r24, r16
    1e0a:	b7 01       	movw	r22, r14
    1e0c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__subsf3>
    1e10:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1e12:	77 20       	and	r7, r7
    1e14:	d1 f6       	brne	.-76     	; 0x1dca <_ZN5Print10printFloatEdh+0x15e>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1e16:	ce 01       	movw	r24, r28
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	bf 90       	pop	r11
    1e2a:	af 90       	pop	r10
    1e2c:	9f 90       	pop	r9
    1e2e:	8f 90       	pop	r8
    1e30:	7f 90       	pop	r7
    1e32:	08 95       	ret

00001e34 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1e34:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <_ZN5Print10printFloatEdh>
}
    1e38:	08 95       	ret

00001e3a <__subsf3>:
    1e3a:	50 58       	subi	r21, 0x80	; 128

00001e3c <__addsf3>:
    1e3c:	bb 27       	eor	r27, r27
    1e3e:	aa 27       	eor	r26, r26
    1e40:	0e d0       	rcall	.+28     	; 0x1e5e <__addsf3x>
    1e42:	75 c1       	rjmp	.+746    	; 0x212e <__fp_round>
    1e44:	66 d1       	rcall	.+716    	; 0x2112 <__fp_pscA>
    1e46:	30 f0       	brcs	.+12     	; 0x1e54 <__addsf3+0x18>
    1e48:	6b d1       	rcall	.+726    	; 0x2120 <__fp_pscB>
    1e4a:	20 f0       	brcs	.+8      	; 0x1e54 <__addsf3+0x18>
    1e4c:	31 f4       	brne	.+12     	; 0x1e5a <__addsf3+0x1e>
    1e4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e50:	11 f4       	brne	.+4      	; 0x1e56 <__addsf3+0x1a>
    1e52:	1e f4       	brtc	.+6      	; 0x1e5a <__addsf3+0x1e>
    1e54:	5b c1       	rjmp	.+694    	; 0x210c <__fp_nan>
    1e56:	0e f4       	brtc	.+2      	; 0x1e5a <__addsf3+0x1e>
    1e58:	e0 95       	com	r30
    1e5a:	e7 fb       	bst	r30, 7
    1e5c:	51 c1       	rjmp	.+674    	; 0x2100 <__fp_inf>

00001e5e <__addsf3x>:
    1e5e:	e9 2f       	mov	r30, r25
    1e60:	77 d1       	rcall	.+750    	; 0x2150 <__fp_split3>
    1e62:	80 f3       	brcs	.-32     	; 0x1e44 <__addsf3+0x8>
    1e64:	ba 17       	cp	r27, r26
    1e66:	62 07       	cpc	r22, r18
    1e68:	73 07       	cpc	r23, r19
    1e6a:	84 07       	cpc	r24, r20
    1e6c:	95 07       	cpc	r25, r21
    1e6e:	18 f0       	brcs	.+6      	; 0x1e76 <__addsf3x+0x18>
    1e70:	71 f4       	brne	.+28     	; 0x1e8e <__addsf3x+0x30>
    1e72:	9e f5       	brtc	.+102    	; 0x1eda <__addsf3x+0x7c>
    1e74:	8f c1       	rjmp	.+798    	; 0x2194 <__fp_zero>
    1e76:	0e f4       	brtc	.+2      	; 0x1e7a <__addsf3x+0x1c>
    1e78:	e0 95       	com	r30
    1e7a:	0b 2e       	mov	r0, r27
    1e7c:	ba 2f       	mov	r27, r26
    1e7e:	a0 2d       	mov	r26, r0
    1e80:	0b 01       	movw	r0, r22
    1e82:	b9 01       	movw	r22, r18
    1e84:	90 01       	movw	r18, r0
    1e86:	0c 01       	movw	r0, r24
    1e88:	ca 01       	movw	r24, r20
    1e8a:	a0 01       	movw	r20, r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	ff 27       	eor	r31, r31
    1e90:	59 1b       	sub	r21, r25
    1e92:	99 f0       	breq	.+38     	; 0x1eba <__addsf3x+0x5c>
    1e94:	59 3f       	cpi	r21, 0xF9	; 249
    1e96:	50 f4       	brcc	.+20     	; 0x1eac <__addsf3x+0x4e>
    1e98:	50 3e       	cpi	r21, 0xE0	; 224
    1e9a:	68 f1       	brcs	.+90     	; 0x1ef6 <__addsf3x+0x98>
    1e9c:	1a 16       	cp	r1, r26
    1e9e:	f0 40       	sbci	r31, 0x00	; 0
    1ea0:	a2 2f       	mov	r26, r18
    1ea2:	23 2f       	mov	r18, r19
    1ea4:	34 2f       	mov	r19, r20
    1ea6:	44 27       	eor	r20, r20
    1ea8:	58 5f       	subi	r21, 0xF8	; 248
    1eaa:	f3 cf       	rjmp	.-26     	; 0x1e92 <__addsf3x+0x34>
    1eac:	46 95       	lsr	r20
    1eae:	37 95       	ror	r19
    1eb0:	27 95       	ror	r18
    1eb2:	a7 95       	ror	r26
    1eb4:	f0 40       	sbci	r31, 0x00	; 0
    1eb6:	53 95       	inc	r21
    1eb8:	c9 f7       	brne	.-14     	; 0x1eac <__addsf3x+0x4e>
    1eba:	7e f4       	brtc	.+30     	; 0x1eda <__addsf3x+0x7c>
    1ebc:	1f 16       	cp	r1, r31
    1ebe:	ba 0b       	sbc	r27, r26
    1ec0:	62 0b       	sbc	r22, r18
    1ec2:	73 0b       	sbc	r23, r19
    1ec4:	84 0b       	sbc	r24, r20
    1ec6:	ba f0       	brmi	.+46     	; 0x1ef6 <__addsf3x+0x98>
    1ec8:	91 50       	subi	r25, 0x01	; 1
    1eca:	a1 f0       	breq	.+40     	; 0x1ef4 <__addsf3x+0x96>
    1ecc:	ff 0f       	add	r31, r31
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	66 1f       	adc	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	c2 f7       	brpl	.-16     	; 0x1ec8 <__addsf3x+0x6a>
    1ed8:	0e c0       	rjmp	.+28     	; 0x1ef6 <__addsf3x+0x98>
    1eda:	ba 0f       	add	r27, r26
    1edc:	62 1f       	adc	r22, r18
    1ede:	73 1f       	adc	r23, r19
    1ee0:	84 1f       	adc	r24, r20
    1ee2:	48 f4       	brcc	.+18     	; 0x1ef6 <__addsf3x+0x98>
    1ee4:	87 95       	ror	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f7 95       	ror	r31
    1eee:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef0:	08 f0       	brcs	.+2      	; 0x1ef4 <__addsf3x+0x96>
    1ef2:	b3 cf       	rjmp	.-154    	; 0x1e5a <__addsf3+0x1e>
    1ef4:	93 95       	inc	r25
    1ef6:	88 0f       	add	r24, r24
    1ef8:	08 f0       	brcs	.+2      	; 0x1efc <__addsf3x+0x9e>
    1efa:	99 27       	eor	r25, r25
    1efc:	ee 0f       	add	r30, r30
    1efe:	97 95       	ror	r25
    1f00:	87 95       	ror	r24
    1f02:	08 95       	ret

00001f04 <__cmpsf2>:
    1f04:	d9 d0       	rcall	.+434    	; 0x20b8 <__fp_cmp>
    1f06:	08 f4       	brcc	.+2      	; 0x1f0a <__cmpsf2+0x6>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	08 95       	ret

00001f0c <__divsf3>:
    1f0c:	0c d0       	rcall	.+24     	; 0x1f26 <__divsf3x>
    1f0e:	0f c1       	rjmp	.+542    	; 0x212e <__fp_round>
    1f10:	07 d1       	rcall	.+526    	; 0x2120 <__fp_pscB>
    1f12:	40 f0       	brcs	.+16     	; 0x1f24 <__divsf3+0x18>
    1f14:	fe d0       	rcall	.+508    	; 0x2112 <__fp_pscA>
    1f16:	30 f0       	brcs	.+12     	; 0x1f24 <__divsf3+0x18>
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <__divsf3+0x16>
    1f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1c:	19 f0       	breq	.+6      	; 0x1f24 <__divsf3+0x18>
    1f1e:	f0 c0       	rjmp	.+480    	; 0x2100 <__fp_inf>
    1f20:	51 11       	cpse	r21, r1
    1f22:	39 c1       	rjmp	.+626    	; 0x2196 <__fp_szero>
    1f24:	f3 c0       	rjmp	.+486    	; 0x210c <__fp_nan>

00001f26 <__divsf3x>:
    1f26:	14 d1       	rcall	.+552    	; 0x2150 <__fp_split3>
    1f28:	98 f3       	brcs	.-26     	; 0x1f10 <__divsf3+0x4>

00001f2a <__divsf3_pse>:
    1f2a:	99 23       	and	r25, r25
    1f2c:	c9 f3       	breq	.-14     	; 0x1f20 <__divsf3+0x14>
    1f2e:	55 23       	and	r21, r21
    1f30:	b1 f3       	breq	.-20     	; 0x1f1e <__divsf3+0x12>
    1f32:	95 1b       	sub	r25, r21
    1f34:	55 0b       	sbc	r21, r21
    1f36:	bb 27       	eor	r27, r27
    1f38:	aa 27       	eor	r26, r26
    1f3a:	62 17       	cp	r22, r18
    1f3c:	73 07       	cpc	r23, r19
    1f3e:	84 07       	cpc	r24, r20
    1f40:	38 f0       	brcs	.+14     	; 0x1f50 <__divsf3_pse+0x26>
    1f42:	9f 5f       	subi	r25, 0xFF	; 255
    1f44:	5f 4f       	sbci	r21, 0xFF	; 255
    1f46:	22 0f       	add	r18, r18
    1f48:	33 1f       	adc	r19, r19
    1f4a:	44 1f       	adc	r20, r20
    1f4c:	aa 1f       	adc	r26, r26
    1f4e:	a9 f3       	breq	.-22     	; 0x1f3a <__divsf3_pse+0x10>
    1f50:	33 d0       	rcall	.+102    	; 0x1fb8 <__divsf3_pse+0x8e>
    1f52:	0e 2e       	mov	r0, r30
    1f54:	3a f0       	brmi	.+14     	; 0x1f64 <__divsf3_pse+0x3a>
    1f56:	e0 e8       	ldi	r30, 0x80	; 128
    1f58:	30 d0       	rcall	.+96     	; 0x1fba <__divsf3_pse+0x90>
    1f5a:	91 50       	subi	r25, 0x01	; 1
    1f5c:	50 40       	sbci	r21, 0x00	; 0
    1f5e:	e6 95       	lsr	r30
    1f60:	00 1c       	adc	r0, r0
    1f62:	ca f7       	brpl	.-14     	; 0x1f56 <__divsf3_pse+0x2c>
    1f64:	29 d0       	rcall	.+82     	; 0x1fb8 <__divsf3_pse+0x8e>
    1f66:	fe 2f       	mov	r31, r30
    1f68:	27 d0       	rcall	.+78     	; 0x1fb8 <__divsf3_pse+0x8e>
    1f6a:	66 0f       	add	r22, r22
    1f6c:	77 1f       	adc	r23, r23
    1f6e:	88 1f       	adc	r24, r24
    1f70:	bb 1f       	adc	r27, r27
    1f72:	26 17       	cp	r18, r22
    1f74:	37 07       	cpc	r19, r23
    1f76:	48 07       	cpc	r20, r24
    1f78:	ab 07       	cpc	r26, r27
    1f7a:	b0 e8       	ldi	r27, 0x80	; 128
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <__divsf3_pse+0x56>
    1f7e:	bb 0b       	sbc	r27, r27
    1f80:	80 2d       	mov	r24, r0
    1f82:	bf 01       	movw	r22, r30
    1f84:	ff 27       	eor	r31, r31
    1f86:	93 58       	subi	r25, 0x83	; 131
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8a:	2a f0       	brmi	.+10     	; 0x1f96 <__divsf3_pse+0x6c>
    1f8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f8e:	51 05       	cpc	r21, r1
    1f90:	68 f0       	brcs	.+26     	; 0x1fac <__divsf3_pse+0x82>
    1f92:	b6 c0       	rjmp	.+364    	; 0x2100 <__fp_inf>
    1f94:	00 c1       	rjmp	.+512    	; 0x2196 <__fp_szero>
    1f96:	5f 3f       	cpi	r21, 0xFF	; 255
    1f98:	ec f3       	brlt	.-6      	; 0x1f94 <__divsf3_pse+0x6a>
    1f9a:	98 3e       	cpi	r25, 0xE8	; 232
    1f9c:	dc f3       	brlt	.-10     	; 0x1f94 <__divsf3_pse+0x6a>
    1f9e:	86 95       	lsr	r24
    1fa0:	77 95       	ror	r23
    1fa2:	67 95       	ror	r22
    1fa4:	b7 95       	ror	r27
    1fa6:	f7 95       	ror	r31
    1fa8:	9f 5f       	subi	r25, 0xFF	; 255
    1faa:	c9 f7       	brne	.-14     	; 0x1f9e <__divsf3_pse+0x74>
    1fac:	88 0f       	add	r24, r24
    1fae:	91 1d       	adc	r25, r1
    1fb0:	96 95       	lsr	r25
    1fb2:	87 95       	ror	r24
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	08 95       	ret
    1fb8:	e1 e0       	ldi	r30, 0x01	; 1
    1fba:	66 0f       	add	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	62 17       	cp	r22, r18
    1fc4:	73 07       	cpc	r23, r19
    1fc6:	84 07       	cpc	r24, r20
    1fc8:	ba 07       	cpc	r27, r26
    1fca:	20 f0       	brcs	.+8      	; 0x1fd4 <__divsf3_pse+0xaa>
    1fcc:	62 1b       	sub	r22, r18
    1fce:	73 0b       	sbc	r23, r19
    1fd0:	84 0b       	sbc	r24, r20
    1fd2:	ba 0b       	sbc	r27, r26
    1fd4:	ee 1f       	adc	r30, r30
    1fd6:	88 f7       	brcc	.-30     	; 0x1fba <__divsf3_pse+0x90>
    1fd8:	e0 95       	com	r30
    1fda:	08 95       	ret

00001fdc <__fixsfsi>:
    1fdc:	04 d0       	rcall	.+8      	; 0x1fe6 <__fixunssfsi>
    1fde:	68 94       	set
    1fe0:	b1 11       	cpse	r27, r1
    1fe2:	d9 c0       	rjmp	.+434    	; 0x2196 <__fp_szero>
    1fe4:	08 95       	ret

00001fe6 <__fixunssfsi>:
    1fe6:	bc d0       	rcall	.+376    	; 0x2160 <__fp_splitA>
    1fe8:	88 f0       	brcs	.+34     	; 0x200c <__fixunssfsi+0x26>
    1fea:	9f 57       	subi	r25, 0x7F	; 127
    1fec:	90 f0       	brcs	.+36     	; 0x2012 <__fixunssfsi+0x2c>
    1fee:	b9 2f       	mov	r27, r25
    1ff0:	99 27       	eor	r25, r25
    1ff2:	b7 51       	subi	r27, 0x17	; 23
    1ff4:	a0 f0       	brcs	.+40     	; 0x201e <__fixunssfsi+0x38>
    1ff6:	d1 f0       	breq	.+52     	; 0x202c <__fixunssfsi+0x46>
    1ff8:	66 0f       	add	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	1a f0       	brmi	.+6      	; 0x2008 <__fixunssfsi+0x22>
    2002:	ba 95       	dec	r27
    2004:	c9 f7       	brne	.-14     	; 0x1ff8 <__fixunssfsi+0x12>
    2006:	12 c0       	rjmp	.+36     	; 0x202c <__fixunssfsi+0x46>
    2008:	b1 30       	cpi	r27, 0x01	; 1
    200a:	81 f0       	breq	.+32     	; 0x202c <__fixunssfsi+0x46>
    200c:	c3 d0       	rcall	.+390    	; 0x2194 <__fp_zero>
    200e:	b1 e0       	ldi	r27, 0x01	; 1
    2010:	08 95       	ret
    2012:	c0 c0       	rjmp	.+384    	; 0x2194 <__fp_zero>
    2014:	67 2f       	mov	r22, r23
    2016:	78 2f       	mov	r23, r24
    2018:	88 27       	eor	r24, r24
    201a:	b8 5f       	subi	r27, 0xF8	; 248
    201c:	39 f0       	breq	.+14     	; 0x202c <__fixunssfsi+0x46>
    201e:	b9 3f       	cpi	r27, 0xF9	; 249
    2020:	cc f3       	brlt	.-14     	; 0x2014 <__fixunssfsi+0x2e>
    2022:	86 95       	lsr	r24
    2024:	77 95       	ror	r23
    2026:	67 95       	ror	r22
    2028:	b3 95       	inc	r27
    202a:	d9 f7       	brne	.-10     	; 0x2022 <__fixunssfsi+0x3c>
    202c:	3e f4       	brtc	.+14     	; 0x203c <__fixunssfsi+0x56>
    202e:	90 95       	com	r25
    2030:	80 95       	com	r24
    2032:	70 95       	com	r23
    2034:	61 95       	neg	r22
    2036:	7f 4f       	sbci	r23, 0xFF	; 255
    2038:	8f 4f       	sbci	r24, 0xFF	; 255
    203a:	9f 4f       	sbci	r25, 0xFF	; 255
    203c:	08 95       	ret

0000203e <__floatunsisf>:
    203e:	e8 94       	clt
    2040:	09 c0       	rjmp	.+18     	; 0x2054 <__floatsisf+0x12>

00002042 <__floatsisf>:
    2042:	97 fb       	bst	r25, 7
    2044:	3e f4       	brtc	.+14     	; 0x2054 <__floatsisf+0x12>
    2046:	90 95       	com	r25
    2048:	80 95       	com	r24
    204a:	70 95       	com	r23
    204c:	61 95       	neg	r22
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	8f 4f       	sbci	r24, 0xFF	; 255
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	99 23       	and	r25, r25
    2056:	a9 f0       	breq	.+42     	; 0x2082 <__floatsisf+0x40>
    2058:	f9 2f       	mov	r31, r25
    205a:	96 e9       	ldi	r25, 0x96	; 150
    205c:	bb 27       	eor	r27, r27
    205e:	93 95       	inc	r25
    2060:	f6 95       	lsr	r31
    2062:	87 95       	ror	r24
    2064:	77 95       	ror	r23
    2066:	67 95       	ror	r22
    2068:	b7 95       	ror	r27
    206a:	f1 11       	cpse	r31, r1
    206c:	f8 cf       	rjmp	.-16     	; 0x205e <__floatsisf+0x1c>
    206e:	fa f4       	brpl	.+62     	; 0x20ae <__floatsisf+0x6c>
    2070:	bb 0f       	add	r27, r27
    2072:	11 f4       	brne	.+4      	; 0x2078 <__floatsisf+0x36>
    2074:	60 ff       	sbrs	r22, 0
    2076:	1b c0       	rjmp	.+54     	; 0x20ae <__floatsisf+0x6c>
    2078:	6f 5f       	subi	r22, 0xFF	; 255
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	8f 4f       	sbci	r24, 0xFF	; 255
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	16 c0       	rjmp	.+44     	; 0x20ae <__floatsisf+0x6c>
    2082:	88 23       	and	r24, r24
    2084:	11 f0       	breq	.+4      	; 0x208a <__floatsisf+0x48>
    2086:	96 e9       	ldi	r25, 0x96	; 150
    2088:	11 c0       	rjmp	.+34     	; 0x20ac <__floatsisf+0x6a>
    208a:	77 23       	and	r23, r23
    208c:	21 f0       	breq	.+8      	; 0x2096 <__floatsisf+0x54>
    208e:	9e e8       	ldi	r25, 0x8E	; 142
    2090:	87 2f       	mov	r24, r23
    2092:	76 2f       	mov	r23, r22
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <__floatsisf+0x5e>
    2096:	66 23       	and	r22, r22
    2098:	71 f0       	breq	.+28     	; 0x20b6 <__floatsisf+0x74>
    209a:	96 e8       	ldi	r25, 0x86	; 134
    209c:	86 2f       	mov	r24, r22
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	2a f0       	brmi	.+10     	; 0x20ae <__floatsisf+0x6c>
    20a4:	9a 95       	dec	r25
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	da f7       	brpl	.-10     	; 0x20a4 <__floatsisf+0x62>
    20ae:	88 0f       	add	r24, r24
    20b0:	96 95       	lsr	r25
    20b2:	87 95       	ror	r24
    20b4:	97 f9       	bld	r25, 7
    20b6:	08 95       	ret

000020b8 <__fp_cmp>:
    20b8:	99 0f       	add	r25, r25
    20ba:	00 08       	sbc	r0, r0
    20bc:	55 0f       	add	r21, r21
    20be:	aa 0b       	sbc	r26, r26
    20c0:	e0 e8       	ldi	r30, 0x80	; 128
    20c2:	fe ef       	ldi	r31, 0xFE	; 254
    20c4:	16 16       	cp	r1, r22
    20c6:	17 06       	cpc	r1, r23
    20c8:	e8 07       	cpc	r30, r24
    20ca:	f9 07       	cpc	r31, r25
    20cc:	c0 f0       	brcs	.+48     	; 0x20fe <__fp_cmp+0x46>
    20ce:	12 16       	cp	r1, r18
    20d0:	13 06       	cpc	r1, r19
    20d2:	e4 07       	cpc	r30, r20
    20d4:	f5 07       	cpc	r31, r21
    20d6:	98 f0       	brcs	.+38     	; 0x20fe <__fp_cmp+0x46>
    20d8:	62 1b       	sub	r22, r18
    20da:	73 0b       	sbc	r23, r19
    20dc:	84 0b       	sbc	r24, r20
    20de:	95 0b       	sbc	r25, r21
    20e0:	39 f4       	brne	.+14     	; 0x20f0 <__fp_cmp+0x38>
    20e2:	0a 26       	eor	r0, r26
    20e4:	61 f0       	breq	.+24     	; 0x20fe <__fp_cmp+0x46>
    20e6:	23 2b       	or	r18, r19
    20e8:	24 2b       	or	r18, r20
    20ea:	25 2b       	or	r18, r21
    20ec:	21 f4       	brne	.+8      	; 0x20f6 <__fp_cmp+0x3e>
    20ee:	08 95       	ret
    20f0:	0a 26       	eor	r0, r26
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <__fp_cmp+0x3e>
    20f4:	a1 40       	sbci	r26, 0x01	; 1
    20f6:	a6 95       	lsr	r26
    20f8:	8f ef       	ldi	r24, 0xFF	; 255
    20fa:	81 1d       	adc	r24, r1
    20fc:	81 1d       	adc	r24, r1
    20fe:	08 95       	ret

00002100 <__fp_inf>:
    2100:	97 f9       	bld	r25, 7
    2102:	9f 67       	ori	r25, 0x7F	; 127
    2104:	80 e8       	ldi	r24, 0x80	; 128
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	08 95       	ret

0000210c <__fp_nan>:
    210c:	9f ef       	ldi	r25, 0xFF	; 255
    210e:	80 ec       	ldi	r24, 0xC0	; 192
    2110:	08 95       	ret

00002112 <__fp_pscA>:
    2112:	00 24       	eor	r0, r0
    2114:	0a 94       	dec	r0
    2116:	16 16       	cp	r1, r22
    2118:	17 06       	cpc	r1, r23
    211a:	18 06       	cpc	r1, r24
    211c:	09 06       	cpc	r0, r25
    211e:	08 95       	ret

00002120 <__fp_pscB>:
    2120:	00 24       	eor	r0, r0
    2122:	0a 94       	dec	r0
    2124:	12 16       	cp	r1, r18
    2126:	13 06       	cpc	r1, r19
    2128:	14 06       	cpc	r1, r20
    212a:	05 06       	cpc	r0, r21
    212c:	08 95       	ret

0000212e <__fp_round>:
    212e:	09 2e       	mov	r0, r25
    2130:	03 94       	inc	r0
    2132:	00 0c       	add	r0, r0
    2134:	11 f4       	brne	.+4      	; 0x213a <__fp_round+0xc>
    2136:	88 23       	and	r24, r24
    2138:	52 f0       	brmi	.+20     	; 0x214e <__fp_round+0x20>
    213a:	bb 0f       	add	r27, r27
    213c:	40 f4       	brcc	.+16     	; 0x214e <__fp_round+0x20>
    213e:	bf 2b       	or	r27, r31
    2140:	11 f4       	brne	.+4      	; 0x2146 <__fp_round+0x18>
    2142:	60 ff       	sbrs	r22, 0
    2144:	04 c0       	rjmp	.+8      	; 0x214e <__fp_round+0x20>
    2146:	6f 5f       	subi	r22, 0xFF	; 255
    2148:	7f 4f       	sbci	r23, 0xFF	; 255
    214a:	8f 4f       	sbci	r24, 0xFF	; 255
    214c:	9f 4f       	sbci	r25, 0xFF	; 255
    214e:	08 95       	ret

00002150 <__fp_split3>:
    2150:	57 fd       	sbrc	r21, 7
    2152:	90 58       	subi	r25, 0x80	; 128
    2154:	44 0f       	add	r20, r20
    2156:	55 1f       	adc	r21, r21
    2158:	59 f0       	breq	.+22     	; 0x2170 <__fp_splitA+0x10>
    215a:	5f 3f       	cpi	r21, 0xFF	; 255
    215c:	71 f0       	breq	.+28     	; 0x217a <__fp_splitA+0x1a>
    215e:	47 95       	ror	r20

00002160 <__fp_splitA>:
    2160:	88 0f       	add	r24, r24
    2162:	97 fb       	bst	r25, 7
    2164:	99 1f       	adc	r25, r25
    2166:	61 f0       	breq	.+24     	; 0x2180 <__fp_splitA+0x20>
    2168:	9f 3f       	cpi	r25, 0xFF	; 255
    216a:	79 f0       	breq	.+30     	; 0x218a <__fp_splitA+0x2a>
    216c:	87 95       	ror	r24
    216e:	08 95       	ret
    2170:	12 16       	cp	r1, r18
    2172:	13 06       	cpc	r1, r19
    2174:	14 06       	cpc	r1, r20
    2176:	55 1f       	adc	r21, r21
    2178:	f2 cf       	rjmp	.-28     	; 0x215e <__fp_split3+0xe>
    217a:	46 95       	lsr	r20
    217c:	f1 df       	rcall	.-30     	; 0x2160 <__fp_splitA>
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <__fp_splitA+0x30>
    2180:	16 16       	cp	r1, r22
    2182:	17 06       	cpc	r1, r23
    2184:	18 06       	cpc	r1, r24
    2186:	99 1f       	adc	r25, r25
    2188:	f1 cf       	rjmp	.-30     	; 0x216c <__fp_splitA+0xc>
    218a:	86 95       	lsr	r24
    218c:	71 05       	cpc	r23, r1
    218e:	61 05       	cpc	r22, r1
    2190:	08 94       	sec
    2192:	08 95       	ret

00002194 <__fp_zero>:
    2194:	e8 94       	clt

00002196 <__fp_szero>:
    2196:	bb 27       	eor	r27, r27
    2198:	66 27       	eor	r22, r22
    219a:	77 27       	eor	r23, r23
    219c:	cb 01       	movw	r24, r22
    219e:	97 f9       	bld	r25, 7
    21a0:	08 95       	ret

000021a2 <__gesf2>:
    21a2:	8a df       	rcall	.-236    	; 0x20b8 <__fp_cmp>
    21a4:	08 f4       	brcc	.+2      	; 0x21a8 <__gesf2+0x6>
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	08 95       	ret

000021aa <__mulsf3>:
    21aa:	0b d0       	rcall	.+22     	; 0x21c2 <__mulsf3x>
    21ac:	c0 cf       	rjmp	.-128    	; 0x212e <__fp_round>
    21ae:	b1 df       	rcall	.-158    	; 0x2112 <__fp_pscA>
    21b0:	28 f0       	brcs	.+10     	; 0x21bc <__mulsf3+0x12>
    21b2:	b6 df       	rcall	.-148    	; 0x2120 <__fp_pscB>
    21b4:	18 f0       	brcs	.+6      	; 0x21bc <__mulsf3+0x12>
    21b6:	95 23       	and	r25, r21
    21b8:	09 f0       	breq	.+2      	; 0x21bc <__mulsf3+0x12>
    21ba:	a2 cf       	rjmp	.-188    	; 0x2100 <__fp_inf>
    21bc:	a7 cf       	rjmp	.-178    	; 0x210c <__fp_nan>
    21be:	11 24       	eor	r1, r1
    21c0:	ea cf       	rjmp	.-44     	; 0x2196 <__fp_szero>

000021c2 <__mulsf3x>:
    21c2:	c6 df       	rcall	.-116    	; 0x2150 <__fp_split3>
    21c4:	a0 f3       	brcs	.-24     	; 0x21ae <__mulsf3+0x4>

000021c6 <__mulsf3_pse>:
    21c6:	95 9f       	mul	r25, r21
    21c8:	d1 f3       	breq	.-12     	; 0x21be <__mulsf3+0x14>
    21ca:	95 0f       	add	r25, r21
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	55 1f       	adc	r21, r21
    21d0:	62 9f       	mul	r22, r18
    21d2:	f0 01       	movw	r30, r0
    21d4:	72 9f       	mul	r23, r18
    21d6:	bb 27       	eor	r27, r27
    21d8:	f0 0d       	add	r31, r0
    21da:	b1 1d       	adc	r27, r1
    21dc:	63 9f       	mul	r22, r19
    21de:	aa 27       	eor	r26, r26
    21e0:	f0 0d       	add	r31, r0
    21e2:	b1 1d       	adc	r27, r1
    21e4:	aa 1f       	adc	r26, r26
    21e6:	64 9f       	mul	r22, r20
    21e8:	66 27       	eor	r22, r22
    21ea:	b0 0d       	add	r27, r0
    21ec:	a1 1d       	adc	r26, r1
    21ee:	66 1f       	adc	r22, r22
    21f0:	82 9f       	mul	r24, r18
    21f2:	22 27       	eor	r18, r18
    21f4:	b0 0d       	add	r27, r0
    21f6:	a1 1d       	adc	r26, r1
    21f8:	62 1f       	adc	r22, r18
    21fa:	73 9f       	mul	r23, r19
    21fc:	b0 0d       	add	r27, r0
    21fe:	a1 1d       	adc	r26, r1
    2200:	62 1f       	adc	r22, r18
    2202:	83 9f       	mul	r24, r19
    2204:	a0 0d       	add	r26, r0
    2206:	61 1d       	adc	r22, r1
    2208:	22 1f       	adc	r18, r18
    220a:	74 9f       	mul	r23, r20
    220c:	33 27       	eor	r19, r19
    220e:	a0 0d       	add	r26, r0
    2210:	61 1d       	adc	r22, r1
    2212:	23 1f       	adc	r18, r19
    2214:	84 9f       	mul	r24, r20
    2216:	60 0d       	add	r22, r0
    2218:	21 1d       	adc	r18, r1
    221a:	82 2f       	mov	r24, r18
    221c:	76 2f       	mov	r23, r22
    221e:	6a 2f       	mov	r22, r26
    2220:	11 24       	eor	r1, r1
    2222:	9f 57       	subi	r25, 0x7F	; 127
    2224:	50 40       	sbci	r21, 0x00	; 0
    2226:	8a f0       	brmi	.+34     	; 0x224a <__mulsf3_pse+0x84>
    2228:	e1 f0       	breq	.+56     	; 0x2262 <__mulsf3_pse+0x9c>
    222a:	88 23       	and	r24, r24
    222c:	4a f0       	brmi	.+18     	; 0x2240 <__mulsf3_pse+0x7a>
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	bb 1f       	adc	r27, r27
    2234:	66 1f       	adc	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	91 50       	subi	r25, 0x01	; 1
    223c:	50 40       	sbci	r21, 0x00	; 0
    223e:	a9 f7       	brne	.-22     	; 0x222a <__mulsf3_pse+0x64>
    2240:	9e 3f       	cpi	r25, 0xFE	; 254
    2242:	51 05       	cpc	r21, r1
    2244:	70 f0       	brcs	.+28     	; 0x2262 <__mulsf3_pse+0x9c>
    2246:	5c cf       	rjmp	.-328    	; 0x2100 <__fp_inf>
    2248:	a6 cf       	rjmp	.-180    	; 0x2196 <__fp_szero>
    224a:	5f 3f       	cpi	r21, 0xFF	; 255
    224c:	ec f3       	brlt	.-6      	; 0x2248 <__mulsf3_pse+0x82>
    224e:	98 3e       	cpi	r25, 0xE8	; 232
    2250:	dc f3       	brlt	.-10     	; 0x2248 <__mulsf3_pse+0x82>
    2252:	86 95       	lsr	r24
    2254:	77 95       	ror	r23
    2256:	67 95       	ror	r22
    2258:	b7 95       	ror	r27
    225a:	f7 95       	ror	r31
    225c:	e7 95       	ror	r30
    225e:	9f 5f       	subi	r25, 0xFF	; 255
    2260:	c1 f7       	brne	.-16     	; 0x2252 <__mulsf3_pse+0x8c>
    2262:	fe 2b       	or	r31, r30
    2264:	88 0f       	add	r24, r24
    2266:	91 1d       	adc	r25, r1
    2268:	96 95       	lsr	r25
    226a:	87 95       	ror	r24
    226c:	97 f9       	bld	r25, 7
    226e:	08 95       	ret

00002270 <__unordsf2>:
    2270:	23 df       	rcall	.-442    	; 0x20b8 <__fp_cmp>
    2272:	88 0b       	sbc	r24, r24
    2274:	99 0b       	sbc	r25, r25
    2276:	08 95       	ret

00002278 <__mulsi3>:
    2278:	62 9f       	mul	r22, r18
    227a:	d0 01       	movw	r26, r0
    227c:	73 9f       	mul	r23, r19
    227e:	f0 01       	movw	r30, r0
    2280:	82 9f       	mul	r24, r18
    2282:	e0 0d       	add	r30, r0
    2284:	f1 1d       	adc	r31, r1
    2286:	64 9f       	mul	r22, r20
    2288:	e0 0d       	add	r30, r0
    228a:	f1 1d       	adc	r31, r1
    228c:	92 9f       	mul	r25, r18
    228e:	f0 0d       	add	r31, r0
    2290:	83 9f       	mul	r24, r19
    2292:	f0 0d       	add	r31, r0
    2294:	74 9f       	mul	r23, r20
    2296:	f0 0d       	add	r31, r0
    2298:	65 9f       	mul	r22, r21
    229a:	f0 0d       	add	r31, r0
    229c:	99 27       	eor	r25, r25
    229e:	72 9f       	mul	r23, r18
    22a0:	b0 0d       	add	r27, r0
    22a2:	e1 1d       	adc	r30, r1
    22a4:	f9 1f       	adc	r31, r25
    22a6:	63 9f       	mul	r22, r19
    22a8:	b0 0d       	add	r27, r0
    22aa:	e1 1d       	adc	r30, r1
    22ac:	f9 1f       	adc	r31, r25
    22ae:	bd 01       	movw	r22, r26
    22b0:	cf 01       	movw	r24, r30
    22b2:	11 24       	eor	r1, r1
    22b4:	08 95       	ret

000022b6 <__divmodhi4>:
    22b6:	97 fb       	bst	r25, 7
    22b8:	09 2e       	mov	r0, r25
    22ba:	07 26       	eor	r0, r23
    22bc:	0a d0       	rcall	.+20     	; 0x22d2 <__divmodhi4_neg1>
    22be:	77 fd       	sbrc	r23, 7
    22c0:	04 d0       	rcall	.+8      	; 0x22ca <__divmodhi4_neg2>
    22c2:	2e d0       	rcall	.+92     	; 0x2320 <__udivmodhi4>
    22c4:	06 d0       	rcall	.+12     	; 0x22d2 <__divmodhi4_neg1>
    22c6:	00 20       	and	r0, r0
    22c8:	1a f4       	brpl	.+6      	; 0x22d0 <__divmodhi4_exit>

000022ca <__divmodhi4_neg2>:
    22ca:	70 95       	com	r23
    22cc:	61 95       	neg	r22
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255

000022d0 <__divmodhi4_exit>:
    22d0:	08 95       	ret

000022d2 <__divmodhi4_neg1>:
    22d2:	f6 f7       	brtc	.-4      	; 0x22d0 <__divmodhi4_exit>
    22d4:	90 95       	com	r25
    22d6:	81 95       	neg	r24
    22d8:	9f 4f       	sbci	r25, 0xFF	; 255
    22da:	08 95       	ret

000022dc <__udivmodsi4>:
    22dc:	a1 e2       	ldi	r26, 0x21	; 33
    22de:	1a 2e       	mov	r1, r26
    22e0:	aa 1b       	sub	r26, r26
    22e2:	bb 1b       	sub	r27, r27
    22e4:	fd 01       	movw	r30, r26
    22e6:	0d c0       	rjmp	.+26     	; 0x2302 <__udivmodsi4_ep>

000022e8 <__udivmodsi4_loop>:
    22e8:	aa 1f       	adc	r26, r26
    22ea:	bb 1f       	adc	r27, r27
    22ec:	ee 1f       	adc	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	a2 17       	cp	r26, r18
    22f2:	b3 07       	cpc	r27, r19
    22f4:	e4 07       	cpc	r30, r20
    22f6:	f5 07       	cpc	r31, r21
    22f8:	20 f0       	brcs	.+8      	; 0x2302 <__udivmodsi4_ep>
    22fa:	a2 1b       	sub	r26, r18
    22fc:	b3 0b       	sbc	r27, r19
    22fe:	e4 0b       	sbc	r30, r20
    2300:	f5 0b       	sbc	r31, r21

00002302 <__udivmodsi4_ep>:
    2302:	66 1f       	adc	r22, r22
    2304:	77 1f       	adc	r23, r23
    2306:	88 1f       	adc	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	1a 94       	dec	r1
    230c:	69 f7       	brne	.-38     	; 0x22e8 <__udivmodsi4_loop>
    230e:	60 95       	com	r22
    2310:	70 95       	com	r23
    2312:	80 95       	com	r24
    2314:	90 95       	com	r25
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
    231a:	bd 01       	movw	r22, r26
    231c:	cf 01       	movw	r24, r30
    231e:	08 95       	ret

00002320 <__udivmodhi4>:
    2320:	aa 1b       	sub	r26, r26
    2322:	bb 1b       	sub	r27, r27
    2324:	51 e1       	ldi	r21, 0x11	; 17
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <__udivmodhi4_ep>

00002328 <__udivmodhi4_loop>:
    2328:	aa 1f       	adc	r26, r26
    232a:	bb 1f       	adc	r27, r27
    232c:	a6 17       	cp	r26, r22
    232e:	b7 07       	cpc	r27, r23
    2330:	10 f0       	brcs	.+4      	; 0x2336 <__udivmodhi4_ep>
    2332:	a6 1b       	sub	r26, r22
    2334:	b7 0b       	sbc	r27, r23

00002336 <__udivmodhi4_ep>:
    2336:	88 1f       	adc	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	5a 95       	dec	r21
    233c:	a9 f7       	brne	.-22     	; 0x2328 <__udivmodhi4_loop>
    233e:	80 95       	com	r24
    2340:	90 95       	com	r25
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	08 95       	ret

00002348 <__tablejump2__>:
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31

0000234c <__tablejump__>:
    234c:	05 90       	lpm	r0, Z+
    234e:	f4 91       	lpm	r31, Z+
    2350:	e0 2d       	mov	r30, r0
    2352:	09 94       	ijmp

00002354 <__do_global_dtors>:
    2354:	12 e0       	ldi	r17, 0x02	; 2
    2356:	c0 e4       	ldi	r28, 0x40	; 64
    2358:	d2 e0       	ldi	r29, 0x02	; 2
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <.do_global_dtors_start>

0000235c <.do_global_dtors_loop>:
    235c:	fe 01       	movw	r30, r28
    235e:	0e 94 a6 11 	call	0x234c	; 0x234c <__tablejump__>
    2362:	22 96       	adiw	r28, 0x02	; 2

00002364 <.do_global_dtors_start>:
    2364:	c2 34       	cpi	r28, 0x42	; 66
    2366:	d1 07       	cpc	r29, r17
    2368:	c9 f7       	brne	.-14     	; 0x235c <.do_global_dtors_loop>
    236a:	f8 94       	cli

0000236c <__stop_program>:
    236c:	ff cf       	rjmp	.-2      	; 0x236c <__stop_program>
